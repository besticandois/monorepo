{"version":3,"sources":["../../../node_modules/typescript/lib sync","contracts/OneToOnePricing.address.js","contracts/GrowingPricing.address.js","contracts/OneToOnePricing.abi.js","contracts/PawnFloorOracleFactory.address.js","hooks/OnBlock.js","hooks/Poller.js","hooks/Balance.js","hooks/ContractLoader.js","hooks/ContractReader.js","hooks/LookupAddress.js","hooks/ResolveName.js","hooks/BurnerSigner.js","hooks/UserSigner.js","hooks/UserProvider.js","hooks/useExternalContractLoader.js","components/Address.jsx","components/Balance.jsx","constants.js","helpers/Transactor.js","helpers/ipfs.js","helpers/index.js","components/Blockie.jsx","components/AddressInput.jsx","components/EtherInput.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.js","components/Contract/FunctionForm.jsx","components/Faucet.jsx","components/Header.jsx","components/ThemeSwitch.jsx","components/Timeline.jsx","components/Hint.jsx","components/RaiseTile.jsx","views/CreateUI.jsx","views/Hints.jsx","components/PawnFloorOracle.jsx","views/HomeUI.jsx","views/RaiseUI.jsx","App.jsx","hooks/ExchangePrice.js","hooks/GasPrice.js","hooks/EventListener.js","index.js","contracts/RaiseFactoryFacet.abi.js","contracts/RaiseFactoryFacet.address.js","contracts/Raise.abi.js","contracts/PawnFloorOracle.abi.js","contracts/PawnFloorOracleFactory.abi.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","useOnBlock","provider","fn","args","savedCallback","useRef","useEffect","current","listener","blockNumber","length","on","off","usePoller","delay","extraWatch","setInterval","clearInterval","useBalance","address","pollTime","useState","balance","setBalance","pollBalance","useCallback","a","getBalance","newBalance","ethers","require","useContractLoader","providerOrSigner","config","contracts","setContracts","customAddressKeys","customAddresses","Object","join","customAddressValues","values","active","console","log","listAccounts","accounts","Signer","isSigner","signer","getSigner","getNetwork","providerNetwork","_chainId","chainId","contractList","externalContractList","hardhatContracts","externalContracts","combinedContracts","hardhatNetwork","prototype","hasOwnProperty","call","hardhatNetworkName","newContracts","reduce","accumulator","contractName","_address","includes","Contract","abi","loadContracts","useContractReader","functionName","formatter","onChange","adjustPollTime","value","setValue","tried","setTried","setTimeout","bind","updateValue","newValue","lookupAddress","utils","isAddress","reportedName","resolveName","resolvedAddress","getAddress","useLookupAddress","ensName","setEnsName","cache","window","localStorage","getItem","JSON","parse","timestamp","Date","now","name","then","setItem","stringify","useBurnerSigner","key","setSigner","storedValue","setStoredValue","error","storedKey","_newKey","Wallet","createRandom","privateKey","_signer","connect","useUserSigner","injectedProvider","localProvider","burnerSigner","useMemo","injectedSigner","_isProvider","location","pathname","indexOf","rawPK","incomingPK","hash","replace","history","pushState","currentPrivateKey","useExternalContractLoader","ABI","optionalBytecode","contract","setContract","customContract","bytecode","loadContract","Text","Typography","Address","props","ens","ensProvider","currentTheme","useThemeSwitcher","avatar","paragraph","rows","displayAddress","substr","size","text","etherscanLink","blockExplorer","blockExplorerLink","minimized","style","verticalAlign","color","target","href","rel","seed","toLowerCase","scale","editable","copyable","fontSize","paddingLeft","Balance","dollarMode","setDollarMode","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","price","dollarMultiplier","padding","cursor","onClick","INFURA_ID","NETWORKS","localhost","rpcUrl","hostname","mainnet","kovan","faucet","rinkeby","ropsten","goerli","xdai","gasPrice","matic","mumbai","localArbitrum","localArbitrumL1","rinkebyArbitrum","arbitrum","localOptimismL1","localOptimism","kovanOptimism","optimism","localAvalanche","fujiAvalanche","mainnetAvalanche","NETWORK","n","callbacks","Transactor","etherscan","tx","callback","network","options","notify","navigator","onLine","dappId","system","networkId","transactionHandler","txInformation","possibleFunction","transaction","Notify","etherscanNetwork","etherscanTxUrl","Promise","result","parseUnits","gasLimit","hexlify","sendTransaction","emitter","onclick","open","notification","info","message","description","placement","txResult","listeningInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","wait","data","alert","body","obj","errorObj","host","port","protocol","truncateString","str","maxLen","substring","Blockie","AddressInput","scan","setScan","currentValue","scannerButton","marginTop","count","CameraOutlined","QrcodeOutlined","updateAddress","possibleAddress","scanner","zIndex","position","left","top","width","resolution","onError","onScan","possibleNewValue","lastIndexOf","autoComplete","autoFocus","placeholder","prefix","addonAfter","EtherInput","mode","setMode","display","setDisplay","option","title","usdValue","ethValue","Paragraph","signerAddress","setSignerAddress","newAddress","receiveButton","privateKeyButton","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","providerSend","WalletOutlined","rotate","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","wallet","extraPkDisplayAdded","extraPkDisplay","push","backgroundStyle","pastpk","pastwallet","_signingKey","reload","inputStyle","visible","float","paddingRight","onOk","onCancel","footer","type","disabled","loading","parseEther","to","SendOutlined","Account","userSigner","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","modalButtons","cachedProvider","marginLeft","shape","constants","BigNumber","Faucet","blockie","setAddress","faucetAddress","setFaucetAddress","_faucetAddress","getFaucetAddress","suffix","icon","Header","src","subTitle","ThemeSwitcher","theme","isDarkMode","setIsDarkMode","switcher","themes","status","className","right","bottom","checked","isChecked","dark","light","Hint","hint","createIPFSClient","Select","Option","Input","TextArea","DatePicker","RangePicker","OneToOnePricingAddress","GrowingPricingAddress","PawnFloorOracle","oracleAddress","inUseProvider","writeContracts","newFloorPrice","setNewFloorPrice","tokenId","setTokenId","instance","PawnFloorOracleABI","underwriter","floorPrice","oracleFloor","React","border","margin","interface","encodeFunctionData","acceptOffer","withdraw","updatePrice","PawnFloorOracleFactoryAddress","CreateUI","setPurposeEvents","yourLocalBalance","vars","m","getUrlVars","collectionAddress","setCollectionAddress","setFloorPrice","factoryInstance","PawnFloorOracleFactoryABI","instanceAddress","PawnFloorOracleFactory","justifyContent","maxWidth","undefined","createFloor","Layout","Footer","Sider","Content","targetNetwork","scaffoldEthProvider","providers","StaticJsonRpcProvider","poktMainnetProvider","mainnetInfura","localProviderUrl","localProviderUrlFromEnv","process","REACT_APP_PROVIDER","walletLinkProvider","WalletLink","appName","makeWeb3Provider","Web3Modal","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","bridge","infuraId","rpc","portis","logo","Portis","fortmatic","Fortmatic","connector","enable","authereum","Authereum","App","_network","setInjectedProvider","clearCachedProvider","disconnect","setPrice","DAI","Token","Fetcher","fetchPairData","WETH","pair","route","Route","midPrice","toSignificant","getPrice","useExchangePrice","speed","setGasPrice","loadGasPrice","axios","get","response","newGasPrice","catch","useGasPrice","useUserProvider","localChainId","selectedChainId","faucetTx","yourMainnetBalance","readContracts","mainnetContracts","purpose","eventName","startBlock","updates","setUpdates","resetEventsBlock","messages","pop","removeListener","useEventListener","networkDisplay","networkSelected","networkLocal","closable","ethereum","toString","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","request","method","params","Web3Provider","reason","setRoute","connection","faucetClicked","setFaucetClicked","exact","path","textAlign","align","gutter","span","opacity","marginRight","role","prevTheme","subgraphUri","client","ApolloClient","uri","InMemoryCache","ReactDOM","render","ApolloProvider","themeMap","defaultTheme","document","getElementById"],"mappings":"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","file":"static/js/main.ebeccbd9.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 1039;","module.exports = \"0x0B306BF915C4d645ff596e518fAf3F9669b97016\";","module.exports = \"0x959922bE3CAee4b8Cd9a407cc3ac1C251C2007B1\";","module.exports = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"totalSold\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"nextPrice\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"totalSold\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"viewNextPrice\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }\n];","module.exports = \"0x3Aa5ebB10DC797CAC828524e59A333d0A371443c\";","import { useEffect, useRef } from \"react\";\n\n// helper hook to call a function regularly in time intervals\nconst DEBUG = false;\n\nexport default function useOnBlock(provider, fn, args) {\n  const savedCallback = useRef();\n  // Remember the latest fn.\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [fn]);\n\n  // Turn on the listener if we have a function & a provider\n  useEffect(() => {\n    if (fn && provider) {\n      const listener = blockNumber => {\n        if (DEBUG) console.log(blockNumber, fn, args, provider.listeners());\n\n        if (args && args.length > 0) {\n          savedCallback.current(...args);\n        } else {\n          savedCallback.current();\n        }\n      };\n\n      provider.on(\"block\", listener);\n\n      return () => {\n        provider.off(\"block\", listener);\n      };\n    }\n  }, [provider]);\n}\n","import { useEffect, useRef } from \"react\";\n\n// helper hook to call a function regularly in time intervals\n\nexport default function usePoller(fn, delay, extraWatch) {\n  const savedCallback = useRef();\n  // Remember the latest fn.\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [fn]);\n  // Set up the interval.\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n  // run at start too\n  useEffect(() => {\n    fn();\n  }, [extraWatch]);\n}\n","import { useCallback, useState, useEffect } from \"react\";\nimport useOnBlock from \"./OnBlock\";\nimport usePoller from \"./Poller\";\n\n/*\n  ~ What it does? ~\n\n  Gets your balance in ETH from given address and provider\n\n  ~ How can I use? ~\n\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  ~ Features ~\n\n  - Provide address and get balance corresponding to given address\n  - Change provider to access balance on different chains (ex. mainnetProvider)\n  - If no pollTime is passed, the balance will update on every new block\n*/\n\nconst DEBUG = false;\n\nexport default function useBalance(provider, address, pollTime = 0) {\n  const [balance, setBalance] = useState();\n\n  const pollBalance = useCallback(\n    async (provider, address) => {\n      if (provider && address) {\n        const newBalance = await provider.getBalance(address);\n        if (newBalance !== balance) {\n          setBalance(newBalance);\n        }\n      }\n    },\n    [provider, address],\n  );\n\n  // Only pass a provider to watch on a block if there is no pollTime\n  useOnBlock(pollTime === 0 && provider, () => {\n    if (provider && address && pollTime === 0) {\n      pollBalance(provider, address);\n    }\n  });\n\n  // Update balance when the address or provider changes\n  useEffect(() => {\n    if (address && provider) pollBalance(provider, address);\n  }, [address, provider, pollBalance]);\n\n  // Use a poller if a pollTime is provided\n  usePoller(\n    async () => {\n      if (provider && address && pollTime > 0) {\n        if (DEBUG) console.log(\"polling!\", address);\n        pollBalance();\n      }\n    },\n    pollTime,\n    provider && address,\n  );\n\n  return balance;\n}\n","/* eslint-disable global-require */\nimport { useEffect, useState } from \"react\";\n\nconst { ethers } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Loads your local contracts and gives options to read values from contracts\n  or write transactions into them\n\n  ~ How can I use? ~\n\n  const readContracts = useContractLoader(localProvider) // or\n  const writeContracts = useContractLoader(userProvider)\n\n  ~ Features ~\n\n  - localProvider enables reading values from contracts\n  - userProvider enables writing transactions into contracts\n  - Example of keeping track of \"purpose\" variable by loading contracts into readContracts\n    and using ContractReader.js hook:\n    const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\n  - Example of using setPurpose function from our contract and writing transactions by Transactor.js helper:\n    tx( writeContracts.YourContract.setPurpose(newPurpose) )\n\n  config can include:\n  - chainId - to hardcode the chainId, irrespective of the providerOrSigner chainId\n  - hardhatNetworkName - to hardcode the hardhat network of interest\n  - customAddresses: { contractName: 0xCustomAddress } to hardcode the address for a given named contract\n  - hardhatContracts: object following the hardhat deploy export format (Json with chainIds as keys, which have hardhat network names as keys, which contain arrays of contracts for each)\n  - externalContracts: object with chainIds as keys, with an array of contracts for each\n*/\n\nexport default function useContractLoader(providerOrSigner, config = {}) {\n  const [contracts, setContracts] = useState();\n\n  const customAddressKeys = config.customAddresses && Object.keys(config.customAddresses).join();\n  const customAddressValues = config.customAddresses && Object.values(config.customAddresses).join();\n\n  useEffect(() => {\n    let active = true;\n\n    async function loadContracts() {\n      if (providerOrSigner && typeof providerOrSigner !== \"undefined\") {\n        console.log(`loading contracts`);\n        try {\n          // we need to check to see if this providerOrSigner has a signer or not\n          let signer;\n          let provider;\n          let accounts;\n\n          if (providerOrSigner && typeof providerOrSigner.listAccounts === \"function\") {\n            accounts = await providerOrSigner.listAccounts();\n          }\n\n          if (ethers.Signer.isSigner(providerOrSigner)) {\n            signer = providerOrSigner;\n            provider = signer.provider;\n          } else if (accounts && accounts.length > 0) {\n            signer = providerOrSigner.getSigner();\n            provider = providerOrSigner;\n          } else {\n            signer = providerOrSigner;\n            provider = providerOrSigner;\n          }\n\n          const providerNetwork = await provider.getNetwork();\n\n          const _chainId = config.chainId || providerNetwork.chainId;\n\n          let contractList = {};\n          let externalContractList = {};\n          try {\n            contractList = config.hardhatContracts || require(\"../contracts/hardhat_contracts.json\");\n          } catch (e) {\n            console.log(e);\n          }\n          try {\n            externalContractList = config.externalContracts || require(\"../contracts/external_contracts.js\");\n          } catch (e) {\n            console.log(e);\n          }\n\n          let combinedContracts = {};\n\n          if (contractList[_chainId]) {\n            for (const hardhatNetwork in contractList[_chainId]) {\n              if (Object.prototype.hasOwnProperty.call(contractList[_chainId], hardhatNetwork)) {\n                if (!config.hardhatNetworkName || hardhatNetwork === config.hardhatNetworkName) {\n                  combinedContracts = {\n                    ...combinedContracts,\n                    ...contractList[_chainId][hardhatNetwork].contracts,\n                  };\n                }\n              }\n            }\n          }\n\n          if (externalContractList[_chainId]) {\n            combinedContracts = { ...combinedContracts, ...externalContractList[_chainId].contracts };\n          }\n\n          const newContracts = Object.keys(combinedContracts).reduce((accumulator, contractName) => {\n            const _address =\n              config.customAddresses && Object.keys(config.customAddresses).includes(contractName)\n                ? config.customAddresses[contractName]\n                : combinedContracts[contractName].address;\n            accumulator[contractName] = new ethers.Contract(_address, combinedContracts[contractName].abi, signer);\n            return accumulator;\n          }, {});\n          if (active) setContracts(newContracts);\n        } catch (e) {\n          console.log(\"ERROR LOADING CONTRACTS!!\", e);\n        }\n      }\n    }\n    loadContracts();\n\n    return () => {\n      active = false;\n    };\n  }, [providerOrSigner, config.chainId, config.hardhatNetworkName, customAddressKeys, customAddressValues]);\n\n  return contracts;\n}\n","import { useEffect, useState } from \"react\";\nimport useOnBlock from \"./OnBlock\";\nimport usePoller from \"./Poller\";\n\nconst DEBUG = false;\n\n/*\n  ~ What it does? ~\n\n  Enables you to read values from contracts and keep track of them in the local React states\n\n  ~ How can I use? ~\n\n  const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\n\n  ~ Features ~\n\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\n  - Specify the name of the contract, in this case it is \"YourContract\"\n  - Specify the name of the variable in the contract, in this case we keep track of \"purpose\" variable\n  - Pass an args array if the function requires\n  - Pass pollTime - if no pollTime is specified, the function will update on every new block\n*/\n\nexport default function useContractReader(contracts, contractName, functionName, args, pollTime, formatter, onChange) {\n  let adjustPollTime = 0;\n  if (pollTime) {\n    adjustPollTime = pollTime;\n  } else if (!pollTime && typeof args === \"number\") {\n    // it's okay to pass poll time as last argument without args for the call\n    adjustPollTime = args;\n  }\n\n  const [value, setValue] = useState();\n  const [tried, setTried] = useState(false);\n\n  useEffect(() => {\n    if (typeof onChange === \"function\") {\n      setTimeout(onChange.bind(this, value), 1);\n    }\n  }, [value, onChange]);\n\n  const updateValue = async () => {\n    try {\n      let newValue;\n      if (DEBUG) console.log(\"CALLING \", contractName, functionName, \"with args\", args);\n      if (args && args.length > 0) {\n        newValue = await contracts[contractName][functionName](...args);\n        setTried(true);\n        if (DEBUG)\n          console.log(\"contractName\", contractName, \"functionName\", functionName, \"args\", args, \"RESULT:\", newValue);\n      } else {\n        newValue = await contracts[contractName][functionName]();\n        setTried(true);\n      }\n      if (formatter && typeof formatter === \"function\") {\n        newValue = formatter(newValue);\n      }\n      // console.log(\"GOT VALUE\",newValue)\n      if (newValue !== value) {\n        setValue(newValue);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  // Only pass a provider to watch on a block if we have a contract and no PollTime\n  useOnBlock(contracts && contracts[contractName] && adjustPollTime === 0 && contracts[contractName].provider, () => {\n    if (contracts && contracts[contractName] && adjustPollTime === 0) {\n      if (DEBUG) console.log(\"on-blocking!\", contractName, functionName);\n      updateValue();\n    }\n  });\n\n  // Use a poller if a pollTime is provided\n  usePoller(\n    async () => {\n      if (contracts && contracts[contractName] && adjustPollTime > 0) {\n        if (DEBUG) console.log(\"polling!\", contractName, functionName);\n        updateValue();\n      }\n    },\n    adjustPollTime,\n    contracts && contracts[contractName],\n  );\n\n  if (tried === false && contracts && contracts[contractName]) {\n    updateValue();\n  }\n\n  return value;\n}\n","import { utils } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n\n// resolved if(name){} to not save \"\" into cache\n\n/*\n  ~ What it does? ~\n\n  Gets ENS name from given address and provider\n\n  ~ How can I use? ~\n\n  const ensName = useLookupAddress(mainnetProvider, address);\n\n  ~ Features ~\n\n  - Provide address and get ENS name corresponding to given address\n*/\n\nconst lookupAddress = async (provider, address) => {\n  if (address && utils.isAddress(address)) {\n    // console.log(`looking up ${address}`)\n    try {\n      // Accuracy of reverse resolution is not enforced.\n      // We then manually ensure that the reported ens name resolves to address\n      const reportedName = await provider.lookupAddress(address);\n\n      const resolvedAddress = await provider.resolveName(reportedName);\n\n      if (address && utils.getAddress(address) === utils.getAddress(resolvedAddress)) {\n        return reportedName;\n      }\n      return utils.getAddress(address);\n    } catch (e) {\n      return utils.getAddress(address);\n    }\n  }\n  return 0;\n};\n\nconst useLookupAddress = (provider, address) => {\n  const [ensName, setEnsName] = useState(address);\n  // const [ensCache, setEnsCache] = useLocalStorage('ensCache_'+address); Writing directly due to sync issues\n\n  useEffect(() => {\n    let cache = window.localStorage.getItem(\"ensCache_\" + address);\n    cache = cache && JSON.parse(cache);\n\n    if (cache && cache.timestamp > Date.now()) {\n      setEnsName(cache.name);\n    } else if (provider) {\n      lookupAddress(provider, address).then(name => {\n        if (name) {\n          setEnsName(name);\n          window.localStorage.setItem(\n            \"ensCache_\" + address,\n            JSON.stringify({\n              timestamp: Date.now() + 360000,\n              name,\n            }),\n          );\n        }\n      });\n    }\n  }, [provider, address, setEnsName]);\n\n  return ensName;\n};\n\nexport default useLookupAddress;\n","import { constants } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n\n/*\n  ~ What it does? ~\n\n  Gets address from given ENS name and provider\n\n  ~ How can I use? ~\n\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n\n  ~ Features ~\n\n  - Specify mainnetProvider\n  - Provide ENS name and get address corresponding to given ENS name\n*/\n\nconst useResolveName = (provider, ensName) => {\n  const [address, setAddress] = useState(constants.AddressZero);\n\n  useEffect(() => {\n    if (provider) {\n      provider.resolveName(ensName).then(resolvedAddress => setAddress(resolvedAddress));\n    }\n  }, [provider, ensName]);\n\n  return address;\n};\n\nexport default useResolveName;\n","import { useState, useEffect } from \"react\";\n\nconst { ethers } = require(\"ethers\");\n\nexport default function useBurnerSigner(provider) {\n  const key = \"metaPrivateKey\";\n  let wallet;\n  const [signer, setSigner] = useState();\n  const [storedValue, setStoredValue] = useState();\n\n  const setValue = value => {\n    try {\n      setStoredValue(value);\n      window.localStorage.setItem(key, value);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const storedKey = window.localStorage.getItem(key);\n    if (!storedKey) {\n      console.log(\"generating a new key\");\n      const _newWallet = ethers.Wallet.createRandom();\n      const _newKey = _newWallet.privateKey;\n      setValue(_newKey);\n    } else {\n      setValue(storedKey);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (storedValue && provider) {\n      wallet = new ethers.Wallet(storedValue);\n      const _signer = wallet.connect(provider);\n      setSigner(_signer);\n    }\n  }, [storedValue, provider]);\n\n  return signer;\n}\n","import { useMemo, useState } from \"react\";\nimport useBurnerSigner from \"./BurnerSigner\";\n\n/*\n  ~ What it does? ~\n\n  Gets user provider\n\n  ~ How can I use? ~\n\n  const userProvider = useUserProvider(injectedProvider, localProvider);\n\n  ~ Features ~\n\n  - Specify the injected provider from Metamask\n  - Specify the local provider\n  - Usage examples:\n    const tx = Transactor(userSigner, gasPrice)\n*/\n\nconst useUserSigner = (injectedProvider, localProvider) => {\n  const [signer, setSigner] = useState();\n  const burnerSigner = useBurnerSigner(localProvider);\n\n  useMemo(() => {\n    if (injectedProvider) {\n      console.log(\"🦊 Using injected provider\");\n      const injectedSigner = injectedProvider._isProvider ? injectedProvider.getSigner() : injectedProvider;\n      setSigner(injectedSigner);\n    } else if (!localProvider) setSigner();\n    else {\n      if (window.location.pathname && window.location.pathname.indexOf(\"/pk\") >= 0) {\n        const incomingPK = window.location.hash.replace(\"#\", \"\");\n        let rawPK;\n        if (incomingPK.length === 64 || incomingPK.length === 66) {\n          console.log(\"🔑 Incoming Private Key...\");\n          rawPK = incomingPK;\n          window.history.pushState({}, \"\", \"/\");\n          const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n          if (currentPrivateKey && currentPrivateKey !== rawPK) {\n            window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n          }\n          window.localStorage.setItem(\"metaPrivateKey\", rawPK);\n        }\n      }\n\n      console.log(\"🔥 Using burner signer\", burnerSigner);\n      setSigner(burnerSigner);\n    }\n  }, [injectedProvider, localProvider, burnerSigner]);\n\n  return signer;\n};\n\nexport default useUserSigner;\n","import { useMemo, useState } from \"react\";\nimport useBurnerSigner from \"./BurnerSigner\";\n\n/*\n  ~ What it does? ~\n\n  Gets user provider\n\n  ~ How can I use? ~\n\n  const userProvider = useUserProvider(injectedProvider, localProvider);\n\n  ~ Features ~\n\n  - Specify the injected provider from Metamask\n  - Specify the local provider\n  - Usage examples:\n    const tx = Transactor(userSigner, gasPrice)\n*/\n\nconst useUserSigner = (injectedProvider, localProvider) => {\n  const [signer, setSigner] = useState();\n  const burnerSigner = useBurnerSigner(localProvider);\n\n  useMemo(() => {\n    if (injectedProvider) {\n      console.log(\"🦊 Using injected provider\");\n      const injectedSigner = injectedProvider._isProvider ? injectedProvider.getSigner() : injectedProvider;\n      setSigner(injectedSigner);\n    } else if (!localProvider) setSigner();\n    else {\n      if (window.location.pathname && window.location.pathname.indexOf(\"/pk\") >= 0) {\n        const incomingPK = window.location.hash.replace(\"#\", \"\");\n        let rawPK;\n        if (incomingPK.length === 64 || incomingPK.length === 66) {\n          console.log(\"🔑 Incoming Private Key...\");\n          rawPK = incomingPK;\n          window.history.pushState({}, \"\", \"/\");\n          const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n          if (currentPrivateKey && currentPrivateKey !== rawPK) {\n            window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n          }\n          window.localStorage.setItem(\"metaPrivateKey\", rawPK);\n        }\n      }\n\n      console.log(\"🔥 Using burner signer\", burnerSigner);\n      setSigner(burnerSigner);\n    }\n  }, [injectedProvider, localProvider, burnerSigner]);\n\n  return signer;\n};\n\nexport default useUserSigner;\n","\n/* eslint-disable global-require */\nimport { Contract } from \"@ethersproject/contracts\";\nimport { useState, useEffect } from \"react\";\n\n/*\n  when you want to load an existing contract using just the provider, address, and ABI\n*/\n\nexport default function useExternalContractLoader(provider, address, ABI, optionalBytecode) {\n  const [contract, setContract] = useState();\n  useEffect(() => {\n    async function loadContract() {\n      if (typeof provider !== \"undefined\" && address && ABI) {\n        try {\n          // we need to check to see if this provider has a signer or not\n          let signer;\n          const accounts = await provider.listAccounts();\n          if (accounts && accounts.length > 0) {\n            signer = provider.getSigner();\n          } else {\n            signer = provider;\n          }\n\n          const customContract = new Contract(address, ABI, signer);\n          if(optionalBytecode) customContract.bytecode = optionalBytecode\n\n          setContract(customContract);\n        } catch (e) {\n          console.log(\"ERROR LOADING EXTERNAL CONTRACT AT \"+address+\" (check provider, address, and ABI)!!\", e);\n        }\n      }\n    }\n    loadContract();\n  }, [provider, address, ABI, optionalBytecode]);\n  return contract;\n}\n","import { Skeleton, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport { useLookupAddress } from \"../hooks\";\n\n// changed value={address} to address={address}\n\n/*\n  ~ What it does? ~\n\n  Displays an address with a blockie image and option to copy address\n\n  ~ How can I use? ~\n\n  <Address\n    address={address}\n    ensProvider={mainnetProvider}\n    blockExplorer={blockExplorer}\n    fontSize={fontSize}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n  - Provide fontSize={fontSize} to change the size of address text\n*/\n\nconst { Text } = Typography;\n\nconst blockExplorerLink = (address, blockExplorer) =>\n  `${blockExplorer || \"https://etherscan.io/\"}${\"address/\"}${address}`;\n\nexport default function Address(props) {\n  const address = props.value || props.address;\n\n  const ens = useLookupAddress(props.ensProvider, address);\n\n  const { currentTheme } = useThemeSwitcher();\n\n  if (!address) {\n    return (\n      <span>\n        <Skeleton avatar paragraph={{ rows: 1 }} />\n      </span>\n    );\n  }\n\n  let displayAddress = address.substr(0, 6);\n\n  if (ens && ens.indexOf(\"0x\") < 0) {\n    displayAddress = ens;\n  } else if (props.size === \"short\") {\n    displayAddress += \"...\" + address.substr(-4);\n  } else if (props.size === \"long\") {\n    displayAddress = address;\n  }\n\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\n  if (props.minimized) {\n    return (\n      <span style={{ verticalAlign: \"middle\" }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\n        </a>\n      </span>\n    );\n  }\n\n  let text;\n  if (props.onChange) {\n    text = (\n      <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          {displayAddress}\n        </a>\n      </Text>\n    );\n  } else {\n    text = (\n      <Text copyable={{ text: address }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          {displayAddress}\n        </a>\n      </Text>\n    );\n  }\n\n  return (\n    <span>\n      <span style={{ verticalAlign: \"middle\" }}>\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\n      </span>\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\n        {text}\n      </span>\n    </span>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useBalance } from \"../hooks\";\n\nconst { utils } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n*/\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n\n  // const [listening, setListening] = useState(false);\n\n  const balance = useBalance(props.provider, props.address);\n\n  let floatBalance = parseFloat(\"0.00\");\n\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") {\n    usingBalance = props.balance;\n  }\n  if (typeof props.value !== \"undefined\") {\n    usingBalance = props.value;\n  }\n\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price || props.dollarMultiplier;\n\n  if (price && dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 24,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n","// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\nexport const INFURA_ID = \"460f40a260564ac4a4f4b3fffb032dad\";\n\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\nexport const ETHERSCAN_KEY = \"PSW8C433Q667DVEX5BCRMGNAH9FSGFZ7Q8\";\n\n// BLOCKNATIVE ID FOR Notify.js:\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\n\nexport const NETWORKS = {\n  localhost: {\n    name: \"localhost\",\n    color: \"#666666\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\n  },\n  mainnet: {\n    name: \"mainnet\",\n    color: \"#ff8b9e\",\n    chainId: 1,\n    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://etherscan.io/\",\n  },\n  kovan: {\n    name: \"kovan\",\n    color: \"#7003DD\",\n    chainId: 42,\n    rpcUrl: `https://kovan.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://kovan.etherscan.io/\",\n    faucet: \"https://gitter.im/kovan-testnet/faucet\", // https://faucet.kovan.network/\n  },\n  rinkeby: {\n    name: \"rinkeby\",\n    color: \"#e0d068\",\n    chainId: 4,\n    rpcUrl: `https://rinkeby.infura.io/v3/${INFURA_ID}`,\n    faucet: \"https://faucet.rinkeby.io/\",\n    blockExplorer: \"https://rinkeby.etherscan.io/\",\n  },\n  ropsten: {\n    name: \"ropsten\",\n    color: \"#F60D09\",\n    chainId: 3,\n    faucet: \"https://faucet.ropsten.be/\",\n    blockExplorer: \"https://ropsten.etherscan.io/\",\n    rpcUrl: `https://ropsten.infura.io/v3/${INFURA_ID}`,\n  },\n  goerli: {\n    name: \"goerli\",\n    color: \"#0975F6\",\n    chainId: 5,\n    faucet: \"https://goerli-faucet.slock.it/\",\n    blockExplorer: \"https://goerli.etherscan.io/\",\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\n  },\n  xdai: {\n    name: \"xdai\",\n    color: \"#48a9a6\",\n    chainId: 100,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://dai.poa.network\",\n    faucet: \"https://xdai-faucet.top/\",\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\n  },\n  matic: {\n    name: \"matic\",\n    color: \"#2bbdf7\",\n    chainId: 137,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mainnet.maticvigil.com\",\n    faucet: \"https://faucet.matic.network/\",\n    blockExplorer: \"https://explorer-mainnet.maticvigil.com//\",\n  },\n  mumbai: {\n    name: \"mumbai\",\n    color: \"#92D9FA\",\n    chainId: 80001,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\n    faucet: \"https://faucet.matic.network/\",\n    blockExplorer: \"https://mumbai-explorer.matic.today/\",\n  },\n  localArbitrum: {\n    name: \"localArbitrum\",\n    color: \"#50a0ea\",\n    chainId: 153869338190755,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:8547`,\n  },\n  localArbitrumL1: {\n    name: \"localArbitrumL1\",\n    color: \"#50a0ea\",\n    chainId: 44010,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:7545`,\n  },\n  rinkebyArbitrum: {\n    name: \"Arbitrum Testnet\",\n    color: \"#50a0ea\",\n    chainId: 421611,\n    blockExplorer: \"https://rinkeby-explorer.arbitrum.io/#/\",\n    rpcUrl: `https://rinkeby.arbitrum.io/rpc`,\n  },\n  arbitrum: {\n    name: \"Arbitrum\",\n    color: \"#50a0ea\",\n    chainId: 42161,\n    blockExplorer: \"https://explorer.arbitrum.io/#/\",\n    rpcUrl: `https://arb1.arbitrum.io/rpc`,\n    gasPrice: 0,\n  },\n  localOptimismL1: {\n    name: \"localOptimismL1\",\n    color: \"#f01a37\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":9545\",\n  },\n  localOptimism: {\n    name: \"localOptimism\",\n    color: \"#f01a37\",\n    chainId: 420,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\n    gasPrice: 0,\n  },\n  kovanOptimism: {\n    name: \"kovanOptimism\",\n    color: \"#f01a37\",\n    chainId: 69,\n    blockExplorer: \"https://kovan-optimistic.etherscan.io/\",\n    rpcUrl: `https://kovan.optimism.io`,\n    gasPrice: 0,\n  },\n  optimism: {\n    name: \"optimism\",\n    color: \"#f01a37\",\n    chainId: 10,\n    blockExplorer: \"https://optimistic.etherscan.io/\",\n    rpcUrl: `https://mainnet.optimism.io`,\n  },\n  localAvalanche: {\n    name: \"localAvalanche\",\n    color: \"#666666\",\n    chainId: 43112,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:9650/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  fujiAvalanche: {\n    name: \"fujiAvalanche\",\n    color: \"#666666\",\n    chainId: 43113,\n    blockExplorer: \"https://cchain.explorer.avax-test.network/\",\n    rpcUrl: `https://api.avax-test.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  mainnetAvalanche: {\n    name: \"mainnetAvalanche\",\n    color: \"#666666\",\n    chainId: 43114,\n    blockExplorer: \"https://cchain.explorer.avax.network/\",\n    rpcUrl: `https://api.avax.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n};\n\nexport const NETWORK = chainId => {\n  for (const n in NETWORKS) {\n    if (NETWORKS[n].chainId === chainId) {\n      return NETWORKS[n];\n    }\n  }\n};\n","import { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\n\nconst { ethers } = require(\"ethers\");\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\n\nconst DEBUG = true;\n\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\n  if (typeof providerOrSigner !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      let signer;\n      let network;\n      let provider;\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\n        provider = providerOrSigner.provider;\n        signer = providerOrSigner;\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\n      } else if (providerOrSigner._isProvider) {\n        provider = providerOrSigner;\n        signer = providerOrSigner.getSigner();\n        network = await providerOrSigner.getNetwork();\n      }\n\n      console.log(\"network\", network);\n\n      var options = null;\n      var notify = null;\n      if(navigator.onLine){\n        options = {\n          dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\n          system: \"ethereum\",\n          networkId: network.chainId,\n          // darkMode: Boolean, // (default: false)\n          transactionHandler: txInformation => {\n            if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n            const possibleFunction = callbacks[txInformation.transaction.hash];\n            if (typeof possibleFunction === \"function\") {\n              possibleFunction(txInformation.transaction);\n            }\n          },\n        };\n\n        notify = Notify(options);\n      }\n\n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = ethers.utils.hexlify(120000);\n          }\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if (DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult, ...currentTransactionReceipt });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          await result.wait();\n        }\n\n        return result;\n      } catch (e) {\n        if (DEBUG) console.log(e);\n        // Accounts for Metamask and default signer on all networks\n        if (e.data && e.data.message) {\n          alert(e.data.message);\n        }\n        let message = e.data && e.data.message ? e.data.message : e.error && JSON.parse(JSON.stringify(e.error)).body ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message : e.data ? e.data : JSON.stringify(e);\n        if(!e.error && e.message){\n          message = e.message\n        }\n\n        console.log(\"Attempt to clean up:\", message);\n        try{\n          let obj = JSON.parse(message)\n          if(obj && obj.body){\n            let errorObj = JSON.parse(obj.body)\n            if(errorObj && errorObj.error && errorObj.error.message){\n              message = errorObj.error.message\n            }\n          }\n        }catch(e){\n          //ignore\n        }\n\n        notification.error({\n          message: \"Transaction Error\",\n          description: message,\n        });\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}\n","const IPFS = require('ipfs-api');\nconst ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\n\nexport default ipfs;","import { BigNumber } from \"ethers\";\n\nexport { default as Transactor } from \"./Transactor\";\nexport { default as ipfs } from \"./ipfs\";\n\n\nexport function standardizeLink(link) {\n    if (link) {\n        link = link.replace(\"ipfs://ipfs/\", \"https://ipfs.io/ipfs/\")\n        return link.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\n    } else {\n        return \"\";\n    }\n};\n\nexport function ipfsLinkFromHash(hash) {\n    return \"https://ipfs.io/ipfs/\" + hash;\n}\n\nexport function truncateString(str, maxLen) {\n    if (!str) {\n        return \"\";\n    }\n    if (str.length > maxLen) {\n        str = str.substring(0, maxLen);\n        return str + \"...\";\n    }\n    return str;\n}\n\nexport function relationToNow(start, end) {\n    let startBN = BigNumber.from(start);\n    const startDate = new Date(startBN.toNumber() * 1000);\n    let endBN = BigNumber.from(end);\n    const endDate = new Date(endBN.toNumber() * 1000);\n    console.log(startDate, endDate);\n\n    const now = Date.now();\n    if (now > endDate.getTime()) {\n        //already over\n        return \"Complete\";\n    } else if (now < startDate.getTime()) {\n        //hasn't started yet\n\n        let diff = (startDate.getTime() - now) / 1000;\n        diff /= 60;\n        return `Opens in ${ Math.abs(Math.round(diff))} minutes`;\n    } \n    //ongoing\n    let diff = (endDate.getTime() - now) / 1000;\n    diff /= 60;\n    return `Closing in ${Math.abs(Math.round(diff))} minutes!`;\n\n}\n\nexport function getUrlVars() {\n    var vars = {};\n    var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {\n        vars[key] = value;\n    });\n    return vars;\n}\n","import React from \"react\";\nimport Blockies from \"react-blockies\";\n\n// provides a blockie image for the address using \"react-blockies\" library\n\nexport default function Blockie(props) {\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\n    return <span />;\n  }\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\n}\n","import { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { Badge, Input } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks\";\nimport React, { useCallback, useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport Blockie from \"./Blockie\";\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/*\n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/\n\nexport default function AddressInput(props) {\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const scannerButton = (\n    <div\n      style={{ marginTop: 4, cursor: \"pointer\" }}\n      onClick={() => {\n        setScan(!scan);\n      }}\n    >\n      <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n        <QrcodeOutlined style={{ fontSize: 18 }} />\n      </Badge>{\" \"}\n      Scan\n    </div>\n  );\n\n  const { ensProvider, onChange } = props;\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setValue(address);\n        if (typeof onChange === \"function\") {\n          onChange(address);\n        }\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  const scanner = scan ? (\n    <div\n      style={{\n        zIndex: 256,\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        width: \"100%\",\n      }}\n      onClick={() => {\n        setScan(false);\n      }}\n    >\n      <QrReader\n        delay={250}\n        resolution={1200}\n        onError={e => {\n          console.log(\"SCAN ERROR\", e);\n          setScan(false);\n        }}\n        onScan={newValue => {\n          if (newValue) {\n            console.log(\"SCAN VALUE\", newValue);\n            let possibleNewValue = newValue;\n            if (possibleNewValue.indexOf(\"/\") >= 0) {\n              possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n              console.log(\"CLEANED VALUE\", possibleNewValue);\n            }\n            setScan(false);\n            updateAddress(possibleNewValue);\n          }\n        }}\n        style={{ width: \"100%\" }}\n      />\n    </div>\n  ) : (\n    \"\"\n  );\n\n  return (\n    <div>\n      {scanner}\n      <Input\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\n        autoComplete=\"off\"\n        autoFocus={props.autoFocus}\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\n        value={ens || currentValue}\n        addonAfter={scannerButton}\n        onChange={e => {\n          updateAddress(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\n// small change in useEffect, display currentValue if it's provided by user\n\n/*\n  ~ What it does? ~\n\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\n\n  ~ How can I use? ~\n\n  <EtherInput\n    autofocus\n    price={price}\n    value=100\n    placeholder=\"Enter amount\"\n    onChange={value => {\n      setAmount(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide value={value} to specify initial amount of ether\n  - Provide placeholder=\"Enter amount\" value for the input\n  - Control input change by onChange={value => { setAmount(value);}}\n*/\n\nexport default function EtherInput(props) {\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState();\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    if (!props.price) return \"\";\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"USD\") {\n            setMode(\"ETH\");\n            setDisplay(currentValue);\n          } else {\n            setMode(\"USD\");\n            if (currentValue) {\n              const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\n              setDisplay(usdValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let prefix;\n  let addonAfter;\n  if (mode === \"USD\") {\n    prefix = \"$\";\n    addonAfter = option(\"USD 🔀\");\n  } else {\n    prefix = \"Ξ\";\n    addonAfter = option(\"ETH 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\n      autoFocus={props.autoFocus}\n      prefix={prefix}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"USD\") {\n          const possibleNewValue = parseFloat(newValue);\n          if (possibleNewValue) {\n            const ethValue = possibleNewValue / props.price;\n            setValue(ethValue);\n            if (typeof props.onChange === \"function\") {\n              props.onChange(ethValue);\n            }\n            setDisplay(newValue);\n          } else {\n            setDisplay(newValue);\n          }\n        } else {\n          setValue(newValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\nimport { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\nimport { ethers } from \"ethers\";\nimport QR from \"qrcode.react\";\nimport React, { useState, useEffect } from \"react\";\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport AddressInput from \"./AddressInput\";\nimport Balance from \"./Balance\";\nimport EtherInput from \"./EtherInput\";\n\nconst { Text, Paragraph } = Typography;\n\n/*\n  ~ What it does? ~\n\n  Displays a wallet where you can specify address and send USD/ETH, with options to\n  scan address, to convert between USD and ETH, to see and generate private keys,\n  to send, receive and extract the burner wallet\n\n  ~ How can I use? ~\n\n  <Wallet\n    provider={userProvider}\n    address={address}\n    ensProvider={mainnetProvider}\n    price={price}\n    color='red'\n  />\n\n  ~ Features ~\n\n  - Provide provider={userProvider} to display a wallet\n  - Provide address={address} if you want to specify address, otherwise\n                                                    your default address will be used\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide color to specify the color of wallet icon\n*/\n\nexport default function Wallet(props) {\n  const [signerAddress, setSignerAddress] = useState();\n  useEffect(() => {\n    async function getAddress() {\n      if (props.signer) {\n        const newAddress = await props.signer.getAddress();\n        setSignerAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [props.signer]);\n\n  const selectedAddress = props.address || signerAddress;\n\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState();\n\n  const providerSend = props.provider ? (\n    <Tooltip title=\"Wallet\">\n      <WalletOutlined\n        onClick={() => {\n          setOpen(!open);\n        }}\n        rotate={-90}\n        style={{\n          padding: 7,\n          color: props.color ? props.color : \"\",\n          cursor: \"pointer\",\n          fontSize: 28,\n          verticalAlign: \"middle\",\n        }}\n      />\n    </Tooltip>\n  ) : (\n    \"\"\n  );\n\n  let display;\n  let receiveButton;\n  let privateKeyButton;\n  if (qr) {\n    display = (\n      <div>\n        <div>\n          <Text copyable>{selectedAddress}</Text>\n        </div>\n        <QR\n          value={selectedAddress}\n          size=\"450\"\n          level=\"H\"\n          includeMargin\n          renderAs=\"svg\"\n          imageSettings={{ excavate: false }}\n        />\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setQr(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Hide\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  } else if (pk) {\n    const pk = localStorage.getItem(\"metaPrivateKey\");\n    const wallet = new ethers.Wallet(pk);\n\n    if (wallet.address !== selectedAddress) {\n      display = (\n        <div>\n          <b>*injected account*, private key unknown</b>\n        </div>\n      );\n    } else {\n      const extraPkDisplayAdded = {};\n      const extraPkDisplay = [];\n      extraPkDisplayAdded[wallet.address] = true;\n      extraPkDisplay.push(\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\n          <a href={\"/pk#\" + pk}>\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\n          </a>\n        </div>,\n      );\n      for (const key in localStorage) {\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\n          console.log(key);\n          const pastpk = localStorage.getItem(key);\n          const pastwallet = new ethers.Wallet(pastpk);\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\n            extraPkDisplayAdded[pastwallet.address] = true;\n            extraPkDisplay.push(\n              <div style={{ fontSize: 16 }}>\n                <a href={\"/pk#\" + pastpk}>\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\n                  {pastwallet.address.substr(0, 6)}\n                </a>\n              </div>,\n            );\n          }\n        }\n      }\n\n      display = (\n        <div>\n          <b>Private Key:</b>\n\n          <div>\n            <Text copyable>{pk}</Text>\n          </div>\n\n          <hr />\n\n          <i>\n            Point your camera phone at qr code to open in\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\n              burner wallet\n            </a>\n            :\n          </i>\n          <QR\n            value={\"https://xdai.io/\" + pk}\n            size=\"450\"\n            level=\"H\"\n            includeMargin\n            renderAs=\"svg\"\n            imageSettings={{ excavate: false }}\n          />\n\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\n            {\"https://xdai.io/\" + pk}\n          </Paragraph>\n\n          {extraPkDisplay ? (\n            <div>\n              <h3>Known Private Keys:</h3>\n              {extraPkDisplay}\n              <Button\n                onClick={() => {\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n                  if (currentPrivateKey) {\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n                  }\n                  const randomWallet = ethers.Wallet.createRandom();\n                  const privateKey = randomWallet._signingKey().privateKey;\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\n                  window.location.reload();\n                }}\n              >\n                Generate\n              </Button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      );\n    }\n\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(\"\");\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Hide\n      </Button>\n    );\n  } else {\n    const inputStyle = {\n      padding: 10,\n    };\n\n    display = (\n      <div>\n        <div style={inputStyle}>\n          <AddressInput\n            autoFocus\n            ensProvider={props.ensProvider}\n            placeholder=\"to address\"\n            address={toAddress}\n            onChange={setToAddress}\n          />\n        </div>\n        <div style={inputStyle}>\n          <EtherInput\n            price={props.price}\n            value={amount}\n            onChange={value => {\n              setAmount(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  }\n\n  return (\n    <span>\n      {providerSend}\n      <Modal\n        visible={open}\n        title={\n          <div>\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\n            <div style={{ float: \"right\", paddingRight: 25 }}>\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\n            </div>\n          </div>\n        }\n        onOk={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        onCancel={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        footer={[\n          privateKeyButton,\n          receiveButton,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            disabled={!amount || !toAddress || qr}\n            loading={false}\n            onClick={() => {\n              const tx = Transactor(props.signer || props.provider);\n\n              let value;\n              try {\n                value = ethers.utils.parseEther(\"\" + amount);\n              } catch (e) {\n                // failed to parseEther, try something else\n                value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\n              }\n\n              tx({\n                to: toAddress,\n                value,\n              });\n              setOpen(!open);\n              setQr();\n            }}\n          >\n            <SendOutlined /> Send\n          </Button>,\n        ]}\n      >\n        {display}\n      </Modal>\n    </span>\n  );\n}\n","import { Button } from \"antd\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport Wallet from \"./Wallet\";\n\n/*\n  ~ What it does? ~\n\n  Displays an Address, Balance, and Wallet as one Account component,\n  also allows users to log in to existing accounts and log out\n\n  ~ How can I use? ~\n\n  <Account\n    address={address}\n    localProvider={localProvider}\n    userProvider={userProvider}\n    mainnetProvider={mainnetProvider}\n    price={price}\n    web3Modal={web3Modal}\n    loadWeb3Modal={loadWeb3Modal}\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\n    blockExplorer={blockExplorer}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to the given address\n  - Provide localProvider={localProvider} to access balance on local network\n  - Provide userProvider={userProvider} to display a wallet\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide price={price} of ether and get your balance converted to dollars\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\n              to be able to log in/log out to/from existing accounts\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n*/\n\nexport default function Account({\n  address,\n  userSigner,\n  localProvider,\n  mainnetProvider,\n  price,\n  minimized,\n  web3Modal,\n  loadWeb3Modal,\n  logoutOfWeb3Modal,\n  blockExplorer,\n}) {\n  const modalButtons = [];\n  if (web3Modal) {\n    if (web3Modal.cachedProvider) {\n      modalButtons.push(\n        <Button\n          key=\"logoutbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          onClick={logoutOfWeb3Modal}\n        >\n          logout\n        </Button>,\n      );\n    } else {\n      modalButtons.push(\n        <Button\n          key=\"loginbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          /* type={minimized ? \"default\" : \"primary\"}     too many people just defaulting to MM and having a bad time */\n          onClick={loadWeb3Modal}\n        >\n          connect\n        </Button>,\n      );\n    }\n  }\n\n  const { currentTheme } = useThemeSwitcher();\n\n  const display = minimized ? (\n    \"\"\n  ) : (\n    <span>\n     \n    </span>\n  );\n\n  return (\n    <div>\n      {display}\n      {modalButtons}\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\nconst { utils, constants } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays input field with options to convert between STRING and BYTES32\n\n  ~ How can I use? ~\n\n  <BytesStringInput\n    autofocus\n    value={\"scaffold-eth\"}\n    placeholder=\"Enter value...\"\n    onChange={value => {\n      setValue(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide value={value} to specify initial string\n  - Provide placeholder=\"Enter value...\" value for the input\n  - Control input change by onChange={value => { setValue(value);}}\n\n*/\n\nexport default function BytesStringInput(props) {\n  const [mode, setMode] = useState(\"STRING\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState(constants.HashZero);\n\n  // current value is the value in bytes32\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"STRING\") {\n            setMode(\"BYTES32\");\n            if (!utils.isHexString(currentValue)) {\n              /* in case user enters invalid bytes32 number,\n                   it considers it as string and converts to bytes32 */\n              const changedValue = utils.formatBytes32String(currentValue);\n              setDisplay(changedValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          } else {\n            setMode(\"STRING\");\n            if (currentValue && utils.isHexString(currentValue)) {\n              setDisplay(utils.parseBytes32String(currentValue));\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let addonAfter;\n  if (mode === \"STRING\") {\n    addonAfter = option(\"STRING 🔀\");\n  } else {\n    addonAfter = option(\"BYTES32 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\n      autoFocus={props.autoFocus}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"STRING\") {\n          // const ethValue = parseFloat(newValue) / props.price;\n          // setValue(ethValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(utils.formatBytes32String(newValue));\n          }\n          setValue(utils.formatBytes32String(newValue));\n          setDisplay(newValue);\n        } else {\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setValue(newValue);\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import React from \"react\";\nimport { Address } from \"..\";\nconst { utils } = require(\"ethers\");\n\nconst tryToDisplay = thing => {\n  if (thing && thing.toNumber) {\n    try {\n      return thing.toNumber();\n    } catch (e) {\n      return \"Ξ\" + utils.formatUnits(thing, \"ether\");\n    }\n  }\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\n    return <Address address={thing} fontSize={22} />;\n  }\n  return JSON.stringify(thing);\n};\n\nexport default tryToDisplay;\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../../helpers\";\nimport tryToDisplay from \"./utils\";\n\nconst { utils, BigNumber } = require(\"ethers\");\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  let inputIndex = 0;\n  const inputs = functionInfo.inputs.map(input => {\n    const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + inputIndex++;\n\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to bytes32\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to hex\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key]);\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = (\n          <Tooltip placement=\"right\" title=\"blockie\">\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        );\n      }\n    }\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={event => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    );\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key=\"txValueInput\">\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      const floatValue = parseFloat(txValue);\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\"number to hex\">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                  </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const buttonIcon =\n    functionInfo.type === \"call\" ? (\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\n    ) : (\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\n    );\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              let innerIndex = 0;\n              const args = functionInfo.inputs.map(input => {\n                const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + innerIndex++;\n                let value = form[key];\n                if (input.baseType === \"array\") {\n                  value = JSON.parse(value);\n                } else if (input.type === \"bool\") {\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                    value = 1;\n                  } else {\n                    value = 0;\n                  }\n                }\n                return value;\n              });\n\n              let result;\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n                const returned = await contractFunction(...args);\n                result = tryToDisplay(returned);\n              } else {\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                if (gasPrice) {\n                  overrides.gasPrice = gasPrice;\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                result = tryToDisplay(returned);\n              }\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n","import { SendOutlined } from \"@ant-design/icons\";\nimport { Button, Input, Tooltip } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks\";\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/*\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n*/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (props.localProvider) {\n        const _faucetAddress = await props.localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n        //console.log(_faucetAddress);\n      }\n    };\n    getFaucetAddress();\n  }, [props.localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const ens = useLookupAddress(props.ensProvider, address);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n          try {\n            const possibleAddress = await props.ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setAddress(address);\n      }\n    },\n    [props.ensProvider, props.onChange],\n  );\n\n  const tx = Transactor(props.localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={props.placeholder ? props.placeholder : \"local faucet\"}\n        prefix={blockie}\n        // value={address}\n        value={ens || address}\n        onChange={e => {\n          // setAddress(e.target.value);\n          updateAddress(e.target.value);\n        }}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: utils.parseEther(\"0.01\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet\n              color=\"#888888\"\n              provider={props.localProvider}\n              ensProvider={props.ensProvider}\n              price={props.price}\n              address={faucetAddress}\n            />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n","import { PageHeader } from \"antd\";\nimport React from \"react\";\n\n// displays a page header\n\nexport default function Header() {\n  return (\n    <a href=\"https://blackhole.bet\" target=\"_blank\" rel=\"noopener noreferrer\">\n      <PageHeader\n        avatar={{\n          src:\"/logo512.png\"\n        }}\n        title=\"Besticando.is\"\n        subTitle=\"Welcome to the floor anon\"\n        style={{ cursor: \"pointer\" }}\n      />\n    </a>\n  );\n}\n","import { Switch } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nexport default function ThemeSwitcher() {\n  const theme = window.localStorage.getItem(\"theme\");\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\n  const { switcher, currentTheme, status, themes } = useThemeSwitcher();\n\n  useEffect(() => {\n    window.localStorage.setItem(\"theme\", currentTheme);\n  }, [currentTheme]);\n\n  const toggleTheme = isChecked => {\n    setIsDarkMode(isChecked);\n    switcher({ theme: isChecked ? themes.dark : themes.light });\n  };\n\n  // Avoid theme change flicker\n  // if (status === \"loading\") {\n  //   return null;\n  // }\n\n  return (\n    <div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}>\n      <span style={{ padding: 8 }}>{currentTheme === \"light\" ? \"☀️\" : \"🌜\"}</span>\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\n    </div>\n  );\n}\n","import { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\nimport { Timeline, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\n\nconst { Text } = Typography;\n\n// displays a timeline for scaffold-eth usage\n\nexport default function TimelineDisplay(props) {\n  return (\n    <Timeline mode=\"right\">\n      <Timeline.Item dot=\"💾\">\n        <Text delete>\n          Clone and Install from the{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\n            github repo\n          </a>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⚛️\">\n        <Text delete>\n          Start your frontend app with: <Text strong>yarn start</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⛓\">\n        <Text delete={props.chainIsUp}>\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📝\">\n        <Text delete={props.hasOwner}>\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🤡\">\n        <Text delete={props.isNotSmoort}>\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\n        <Text delete={props.hasEther}>\n          Send test ether to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\n          (bottom left) faucet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.contractHasEther ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.contractHasEther}>\n          Deposit some funds into your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.amOwnerOfContract}>\n          Set <b>owner</b> of your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"☢️\">\n        <Text>\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🔬\">\n        <Text>\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\n          <Text strong>yarn run test</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🚀\">\n        <Text>\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\n            @ me\n          </a>\n          !\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📖\">\n        <Text>\n          Read more about{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\n            Ethereum\n          </a>\n          ,{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\n            Solidity\n          </a>\n          , and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\n            Buidler\n          </a>\n        </Text>\n      </Timeline.Item>\n    </Timeline>\n  );\n}\n","\n\nimport React from \"react\";\nexport default function Hint(props) {\n    const {hint} = props;\n    return <p style={{ color: \"gray\", fontSize: \"small\" }}>{hint}</p>\n          \n}","\nimport React, { useState } from \"react\";\nimport {\n  InputNumber,\n  Upload,\n  Button,\n  List,\n  Divider,\n  Image,\n  Input,\n  Card,\n  DatePicker,\n  Space,\n  Slider,\n  Switch,\n  Progress,\n  Spin,\n  Select,\n} from \"antd\";\nimport {\nuseHistory,\nuseLocation\n} from \"react-router-dom\";\nimport axios from \"axios\";\nimport { SyncOutlined, UploadOutlined } from \"@ant-design/icons\";\nimport { Address, Balance, EtherInput, AddressInput, Hint } from \"../components\";\nimport { parseEther, formatEther } from \"@ethersproject/units\";\nimport { Alert } from \"antd\";\nimport { ipfs, ipfsLinkFromHash, relationToNow, truncateString } from \"../helpers\";\nimport RaiseFactoryFacetABI from \"../contracts/RaiseFactoryFacet.abi\";\nimport { useExternalContractLoader, useContractReader, useBalance } from \"../hooks\";\n\nimport { create as createIPFSClient } from'ipfs-http-client';\nimport RaiseFactoryFacetAddress from \"../contracts/RaiseFactoryFacet.address\";\nimport RaiseFactoryFacetAbi from \"../contracts/RaiseFactoryFacet.abi\";\nimport RaiseAbi from \"../contracts/Raise.abi\";\nimport { createSetAccessor } from \"typescript\";\nimport RelationToNow from \"./RelationToNow\";\nconst ipfsClient = createIPFSClient('https://ipfs.infura.io:5001')\nconst { Option } = Select;\nconst { TextArea } = Input;\nconst { RangePicker } = DatePicker;\n\n\n\nexport default function RaiseTile({\n  raiseID,\n  provider,\n  factoryInstance\n}) {\n  let history = useHistory();\n    const [loading, setLoading] = React.useState(false);\n    const [loadedData, setLoadedData] = React.useState(false);\n  const raiseAddress = useContractReader({ RaiseFactoryFacet: factoryInstance }, \"RaiseFactoryFacet\", \"raises\", [BigInt(raiseID)]);\n       \n  console.log(`loaded address ${raiseAddress} id ${raiseID}`);\n  //step 2 create raise instance\n  const raiseInstance = useExternalContractLoader(provider, raiseAddress, RaiseAbi);\n   //step 3 use instance to get data\n  const raiseData = useContractReader({ Raise: raiseInstance }, \"Raise\", \"data\", []);\n  const raiseName = useContractReader({ Raise: raiseInstance }, \"Raise\", \"name\", []);\n  const raiseSymbol = useContractReader({ Raise: raiseInstance }, \"Raise\", \"symbol\", []);\n  const raiseEnd = useContractReader({ Raise: raiseInstance }, \"Raise\", \"endTime\", []);\n  console.log( `raise data`);\n  console.log(raiseData);\n\n  async function loadRaiseData() {\n      setLoading(true);\n      try {\n\n        var d = await axios.get(raiseData[2]);\n        console.log(`axios got data`);\n        console.log(d);\n        setLoadedData(d.data);\n      } catch(e) {\n          console.log(e);\n      }\n    setLoading(false);\n  }\n\n  React.useEffect(() => {\n      if (raiseData != undefined && !loading) {\n          loadRaiseData();\n      }\n  }, [raiseData]);\n\n\n\n   \n\n\n  return (\n    <Card title={raiseName} style={{width: \"300\", cursor: \"pointer\"}} onClick={() => {history.push(`/r/${raiseAddress}`)}}>\n        <Hint hint={<>{`Raise #${raiseID}`}</>}/>\n        <br/>\n        {loading ? <Spin/> : <>\n        <Image width={300} height={300} src={loadedData.image}/>\n        <br/>\n        <p>{truncateString(loadedData.description ? loadedData.description : \"\", 20)}</p>\n        </>}\n        <br/>\n        <a href={`https://etherscan.io/address/${raiseAddress}`}> <Hint hint={<>{truncateString(`${raiseAddress}`, 8)}</>}/></a>\n        <hr/>\n        {raiseData ? \n        <p><RelationToNow raiseStart={raiseData[4]} raiseEnd={raiseEnd}/> </p>\n        : <></>\n        }\n    </Card>\n    \n\n    );\n}\n","\nimport React, { useState } from \"react\";\nimport {\n  InputNumber,\n  Upload,\n  Button,\n  List,\n  Divider,\n  Input,\n  Card,\n  DatePicker,\n  Space,\n  Slider,\n  Switch,\n  Progress,\n  Spin,\n  Select,\n  Tooltip\n} from \"antd\";\nimport { Address, Balance, EtherInput, AddressInput, Hint } from \"../components\";\nimport { parseEther, formatEther } from \"@ethersproject/units\";\nimport { Alert } from \"antd\";\nimport { ipfs, ipfsLinkFromHash } from \"../helpers\";\nimport RaiseFactoryFacetABI from \"../contracts/RaiseFactoryFacet.abi\";\nimport { useExternalContractLoader, useContractReader, useBalance } from \"../hooks\";\n\nimport { create as createIPFSClient } from 'ipfs-http-client';\nimport RaiseFactoryFacetAddress from \"../contracts/RaiseFactoryFacet.address\";\nimport RaiseFactoryFacetAbi from \"../contracts/RaiseFactoryFacet.abi\";\nimport OneToOnePricingAddress from \"../contracts/OneToOnePricing.address\";\nimport GrowingPricingAddress from \"../contracts/GrowingPricing.address\";\nimport { InfoCircleOutlined } from \"@ant-design/icons\";\n\nconst pricingAddresses = [{\n  name: \"Flat Rate(1:1)\",\n  address: OneToOnePricingAddress\n}, {\n  name: \"Increasing (starts 1:1 and price matches total sold)\",\n  address: GrowingPricingAddress\n}\n];\nconst ipfsClient = createIPFSClient('https://ipfs.infura.io:5001')\nconst { Option } = Select;\nconst { TextArea } = Input;\nconst { RangePicker } = DatePicker;\n\nfunction Required() {\n  return <span style={{ color: \"red\" }}>*</span>;\n}\n\nexport default function CreateUI({\n  setPurposeEvents,\n  address,\n  mainnetProvider,\n  userSigner,\n  localProvider,\n  yourLocalBalance,\n  price,\n  tx,\n  writeContracts,\n}) {\n  const [amount, setAmount] = useState();\n  const [customPricingStrategyAddress, setCustomPricingStrategyAddress] = useState(pricingAddresses[0].address);\n  const [pricingStrategy, setPricingStrategy] = useState();\n  const [symbol, setSymbol] = useState();\n  const [name, setName] = useState();\n  const [maxSupply, setMaxSupply] = useState(0);\n  const [bufferedFile, setBufferedFile] = useState();\n  const [fundingRange, setFundingRange] = useState();\n  const [selfMint, setSelfMint] = useState(0);\n  const [transactionTax, setTransactionTax] = useState(0);\n  const [decimals, setDescimals] = useState(18);\n  const [advancedTokenomics, setAdvancedTokenomics] = useState();\n  const [description, setDescription] = useState(`\n  Add a short description to show on the home page preview (max 20 characters)\n\n  # RAISEHOUSE\n  ## _No Liquidity Loans, Today_\n  \n  [![N|Solid](https://i.imgur.com/brS2OOU.png)](https://ethereum.org)\n\n  RAISEHOUSE is a decentralized, zero-liquidity, non-security, fundraising platform.\n  \n  - Totally onchain\n  - Simple, easy, and no coding required\n  - ✨Magic  Undercollateralized Loans ✨\n  \n  ## Features\n  \n  - Use your social presence to fundraise your prerevenue projects\n  - This simple markdown description is totally customizable\n  - Customize your token and get a custom link for your limited time raise\n  - Let us provide the launch platform so you can focus on buidling \n  \n  Markdown is a lightweight markup language based on the formatting conventions\n  that people naturally use in email. This description is shown on your raise page. Customize it to show people why they should invest in you.\n  \n  As [Satoshi Nakamoto](https://bitcoin.org/bitcoin.pdf) writes \n  \n  >  A  purely   peer-to-peer   version   of   electronic   cash   would   allow   online \n  payments   to   be   sent   directly   from   one   party   to   another   without   going   through   a \n  financial institution\n  \n  RAISEHOUSE's goal is to bring that vision to fundraising, no more initial offering gatekeepers.\n  `);\n\n  const [loading, setLoading] = useState();\n  const instance = useExternalContractLoader(mainnetProvider, RaiseFactoryFacetAddress, RaiseFactoryFacetAbi);\n\n\n  const data = {}; //writeContracts.DeFiFacet.interface.encodeFunctionData(\"zappify\", [parseEther(\"1000\")]);\n  console.log(userSigner);\n  const uploadProps = {\n    listType: \"picture\",\n    action: \"#\",\n    onChange(e) {\n      setBufferedFile(e.file.thumbUrl);\n      console.log(\"buffer\", e.file.thumbUrl);\n    },\n    defaultFileList: [],\n  };\n\n  function handlePricingChange(v) {\n    console.log(v);\n    setPricingStrategy(v);\n    setCustomPricingStrategyAddress(v);\n  }\n\n  function handleRangeDateChange(e) {\n    setFundingRange(e);\n  }\n\n  function handleTokenCreation() {\n    setLoading(true);\n    if (bufferedFile != undefined) {\n      createTokenURI(bufferedFile)\n      /*   ipfs.files.add(Buffer.from(bufferedFile), (error, result) => {\n          if (result) {\n            createTokenURI(ipfsLinkFromHash(result[0].hash));\n          } else {\n            console.log(error);\n          }\n          setLoading(false); \n        });*/\n    } else {\n      createTokenURI(\"\");\n    }\n  }\n\n  async function createTokenURI(logoURL) {\n    var tokenURI = await ipfsClient.add(JSON.stringify({ image: logoURL, name, description }));\n    createFundingRequest(ipfsLinkFromHash(tokenURI.path));\n  }\n\n  function createFundingRequest(tokenURI) {\n    setLoading(true);\n    if (!fundingRange) {\n      alert(\"Funding Range is a required input, please select a date range for your funding event\");\n    } else if (!name) {\n      alert(\"Name is a required input\");\n    } else if (!symbol) {\n      alert(\"Symbol is a required input\");\n    } else {\n      console.log(`creating fr with logo ${tokenURI}`);\n      let start = fundingRange[0]._d.getTime() / 1000;\n      let end = fundingRange[1]._d.getTime() / 1000;\n      start = Math.floor(start);\n      end = Math.floor(end);\n      const eventLength = end - start;\n\n      console.log(`start ${start}, end ${end}`);\n      const data = instance.interface.encodeFunctionData(\"createFR\", [\n        parseEther(`${transactionTax}`),\n        /*  decimals, */\n        parseEther(`${selfMint}`),\n        parseEther(`${maxSupply}`),\n        tokenURI,\n        eventLength,\n        start,\n        name,\n        symbol,\n        customPricingStrategyAddress,]);\n\n      /* replace with\n        pricingStrategy address */\n      tx(\n\n        userSigner.sendTransaction({\n          to: RaiseFactoryFacetAddress,\n          data: data,\n          value: 0,\n        }),\n      );\n    }\n\n    setLoading(false);\n  }\n\n  return (\n    <div>\n      {/*\n        ⚙️ Here is an example UI that displays and sets the purpose in your smart contract:\n      */}\n      <Alert\n        message={\"⚠️ Undercollaterlized loans are risky\"}\n        description={<div></div>}\n        type=\"error\"\n        closable={false}\n      />\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 400, margin: \"auto\", marginTop: 64 }}>\n        <h2>Create Your Token</h2>\n        <br />\n        {/* <h4>purpose: {purpose}</h4> */}\n        {/* upgrades the defi facet only currently for demo purposes */}\n        <Divider />\n        <div style={{ margin: 8 }}>\n          <h5>\n            Token Name\n            <Required />\n          </h5>\n          <Input value={name} onChange={e => setName(e.target.value)} placeholder=\"Token Name\" />\n          <br />\n          <br />\n\n          <h5>\n            Token Symbol\n            <Required />\n          </h5>\n          <Input value={symbol} onChange={e => setSymbol(e.target.value)} placeholder=\"Token Symbol\" />\n          <br /><br />\n          <Switch checkedChildren=\"Advanced Tokenomics Enabled\" unCheckedChildren=\"Show Advanced Tokenomics\" onChange={v => setAdvancedTokenomics(v)} />\n          <br /> <br />\n          {\n            advancedTokenomics ?\n              <div style={{ border: \"1px solid #bada55\", padding: \"5px\" }}>\n                <br />\n                <h3>Advanced Tokenomics </h3>\n                <br />\n                <h5>\n                  Max Supply\n                </h5>\n                <Hint hint={<>Leave blank for uncapped sale</>} />\n                <InputNumber\n                  style={{ width: \"100%\" }}\n                  min=\"0\"\n                  step=\"1\"\n                  parser={value => value.replace(/\\$\\s?|(,*)/g, \"\")}\n                  onChange={e => setMaxSupply(e)}\n                  value={maxSupply}\n                  stringMode\n                />\n                <br />\n                <br />\n                <br />\n                <h5>\n                  Decimals\n                </h5>\n                <Hint hint={<>If unsure leave as 18, thats standard</>} />\n                <InputNumber\n                  style={{ width: \"100%\" }}\n                  min=\"0\"\n                  step=\"1\"\n                  parser={value => value.replace(/\\$\\s?|(,*)/g, \"\")}\n                  onChange={e => setDescimals(e)}\n                  value={decimals}\n                  stringMode\n                />\n                <br />\n                <br />\n                <h5>\n                  Self Mint\n                </h5>\n                <Hint hint={<>How many tokens to premint for you? (without decimals)</>} />\n                <InputNumber\n                  style={{ width: \"100%\" }}\n                  min=\"0\"\n                  step=\"1\"\n                  parser={value => value.replace(/\\$\\s?|(,*)/g, \"\")}\n                  onChange={e => setSelfMint(e)}\n                  value={selfMint}\n                  stringMode\n                />\n\n                <br />\n                <br />\n                <h5>\n                  Transaction Tax\n                </h5>\n                <Hint hint={<>⚠️Transaction tax is not recommended and only intended for advanced users⚠️</>} />\n                <InputNumber\n                  style={{ width: \"100%\" }}\n                  min=\"0\"\n                  step=\"1\"\n                  parser={value => value.replace(/\\$\\s?|(,*)/g, \"\")}\n                  onChange={e => setTransactionTax(e)}\n                  value={transactionTax}\n                  stringMode\n                />\n\n              </div>\n              : <></>\n          }\n\n          <br />\n          <br />\n          <h5>\n            Launch Date Range\n            <Required /> <Tooltip title=\"Holders of $RAISE will be able to mint before the launch starts but only you will be able to transfer tokens\"><InfoCircleOutlined /></Tooltip>\n          </h5>\n          <Hint hint={<>(How Long Can Investors Join This Fundraiser?)</>} />\n          <RangePicker showTime={{ format: \"HH:mm\" }} format=\"YYYY-MM-DD HH:mm\" onChange={(e) => handleRangeDateChange(e)} onOk={() => { }} />\n\n          <br />\n          <br />\n          <h5>\n            Select Pricing Model\n            <Required />\n            <Tooltip title=\"This sets the relationship between how much of your token people get based on the amount of ETH they send. If you don't see a model you like ask in the support discord for assistance in creating a new one\"><InfoCircleOutlined /></Tooltip>\n          </h5>\n          <Select defaultValue={pricingAddresses[0].address} style={{ width: \"100%\" }} onChange={handlePricingChange}>\n            {pricingAddresses.map(p => {\n              return <Option value={p.address}>{p.name}</Option>\n            })}\n            <Option value=\"disabled\" disabled>\n              More Coming Soon\n            </Option>\n            <Option value=\"0x0000000000000000000000000000000000000000\">Custom</Option>\n          </Select>\n\n\n          <br />\n          {pricingStrategy == \"0x0000000000000000000000000000000000000000\" ? (\n            <>\n              <AddressInput\n                autoFocus\n                ensProvider={mainnetProvider}\n                placeholder=\"Custom Pricing Strategy Address\"\n                value={customPricingStrategyAddress}\n                onChange={setCustomPricingStrategyAddress}\n              />\n              <Hint hint={<>Enter address of a custom contract inheriting to the <a href='#'>IPricing</a> interface</>} />\n\n            </>\n          ) : (\n            <></>\n          )}\n\n          <br />\n          <br />\n\n          <h5>Logo <Tooltip title=\"Works best with a 400x400 jpeg\"><InfoCircleOutlined /></Tooltip></h5>\n\n          <input\n            type=\"file\"\n            onChange={async (e) => {\n              const file = e.target.files[0]\n              try {\n                const added = await ipfsClient.add(file)\n                const url = `https://ipfs.infura.io/ipfs/${added.path}`\n                setBufferedFile(url)\n              } catch (error) {\n                console.log('Error uploading file: ', error)\n              }\n            }}\n          />\n          <br />\n          <br />\n\n          <h5>Description</h5>\n          <p style={{ fontSize: \"xx-small\" }}>(Markdown Friendly)</p>\n\n          <TextArea\n            placeholder=\"Description of your project, fundraising goals, and why investors should trust that they'll profit\"\n            value={description}\n            onChange={e => setDescription(e.target.value)}\n          />\n        </div>\n        <Divider />\n        {loading ? (\n          <div style={{ marginTop: 32 }}>\n            <Spin />\n          </div>\n        ) : (\n          <Button onClick={() => handleTokenCreation()}>Create Token</Button>\n        )}\n      </div>\n    \n    </div>\n  );\n}\n","import { utils } from \"ethers\";\nimport { Select } from \"antd\";\nimport React, { useState } from \"react\";\nimport { Address, AddressInput } from \"../components\";\nimport { useTokenList } from \"../hooks\";\n\nconst { Option } = Select;\n\nexport default function Hints({ yourLocalBalance, mainnetProvider, price, address }) {\n  // Get a list of tokens from a tokenlist -> see tokenlists.org!\n  const [selectedToken, setSelectedToken] = useState(\"Pick a token!\");\n  const listOfTokens = useTokenList(\n    \"https://raw.githubusercontent.com/SetProtocol/uniswap-tokenlist/main/set.tokenlist.json\",\n  );\n\n  return (\n    <div>\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>👷</span>\n        Edit your <b>contract</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/contracts\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🛰</span>\n        <b>compile/deploy</b> with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚀</span>\n        Your <b>contract artifacts</b> are automatically injected into your frontend at\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/react-app/src/contracts/\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🎛</span>\n        Edit your <b>frontend</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/reactapp/src/App.js\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔭</span>\n        explore the\n        <span\n          className=\"highlight\"\n          style={{\n            marginLeft: 4,\n            marginRight: 4,\n            /* backgroundColor: \"#f9f9f9\", */\n            padding: 4,\n            borderRadius: 4,\n            fontWeight: \"bolder\",\n          }}\n        >\n          🖇 hooks\n        </span>\n        and\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          📦 components\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        for example, the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          useBalance()\n        </span>{\" \"}\n        hook keeps track of your balance: <b>{utils.formatEther(yourLocalBalance || 0)}</b>\n      </div>\n\n      <div style={{ margin: 8 }}>\n        <div>\n          <b>useTokenList()</b> can get you an array of tokens from{\" \"}\n          <a href=\"https://tokenlists.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n            tokenlists.org!\n          </a>\n        </div>\n        <Select\n          showSearch\n          value={selectedToken}\n          onChange={value => {\n            console.log(`selected ${value}`);\n            setSelectedToken(value);\n          }}\n          filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n          optionFilterProp=\"children\"\n        >\n          {listOfTokens.map(token => (\n            <Option key={token.symbol} value={token.symbol}>\n              {token.symbol}\n            </Option>\n          ))}\n        </Select>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        as you build your app you&apos;ll need web3 specific components like an\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          {\"<AddressInput/>\"}\n        </span>\n        component:\n        <div style={{ width: 350, padding: 16, margin: \"auto\" }}>\n          <AddressInput ensProvider={mainnetProvider} />\n        </div>\n        <div>(try putting in your address, an ens address, or scanning a QR code)</div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        this balance could be multiplied by\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          price\n        </span>{\" \"}\n        that is loaded with the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          usePrice\n        </span>{\" \"}\n        hook with the current value: <b>${price}</b>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💧</span>\n        use the <b>faucet</b> to send funds to\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <Address address={address} minimized /> {address}\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        deploy to a testnet or mainnet by editing\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/hardhat.config.js\n        </span>\n        and running\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔑</span>\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run generate\n        </span>\n        will create a deployer account in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat\n        </span>\n        <div style={{ marginTop: 8 }}>\n          (use{\" \"}\n          <span\n            className=\"highlight\"\n            style={{\n              marginLeft: 4,\n              /* backgroundColor: \"#f1f1f1\", */ padding: 4,\n              borderRadius: 4,\n              fontWeight: \"bolder\",\n            }}\n          >\n            yarn run account\n          </span>{\" \"}\n          to display deployer address and balance)\n        </div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>⚙️</span>\n        build your app with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run build\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        ship it!\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run surge\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run s3\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run ipfs\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💬</span>\n        for support, join this\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\">\n            Telegram Chat\n          </a>\n        </span>\n      </div>\n      <div style={{ padding: 128 }}>\n        🛠 Check out your browser&apos;s developer console for more... (inspect console) 🚀\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport {\n  InputNumber,\n  Upload,\n  Button,\n  List,\n  Divider,\n  Input,\n  Card,\n  DatePicker,\n  Space,\n  Slider,\n  Switch,\n  Progress,\n  Spin,\n  Select,\n} from \"antd\";\nimport { SyncOutlined, UploadOutlined } from \"@ant-design/icons\";\nimport { Address, Contract, Balance, EtherInput, AddressInput, Hint, RaiseTile } from \"../components\";\nimport { parseEther, formatEther } from \"@ethersproject/units\";\nimport { Alert } from \"antd\";\nimport { ipfs, ipfsLinkFromHash, truncateString } from \"../helpers\";\nimport { useExternalContractLoader, useContractReader, useBalance } from \"../hooks\";\n\nimport { create as createIPFSClient } from \"ipfs-http-client\";\nimport PawnFloorOracleABI from \"../contracts/PawnFloorOracle.abi\";\nimport ERC721ABI from \"../contracts/ERC721.abi\";\nimport PawnFloorOracleFactoryABI from \"../contracts/PawnFloorOracleFactory.abi\";\nimport { isAddress } from \"ethers/lib/utils\";\nimport PawnFloorOracleFactoryAddress from \"../contracts/PawnFloorOracleFactory.address\";\n//const PawnFloorOracleFactoryAddress = \"0x01D13EE22C9B0A18173219B97337961fFDA5a1f5\";\nconst ipfsClient = createIPFSClient(\"https://ipfs.infura.io:5001\");\nconst { Option } = Select;\nconst { TextArea } = Input;\nconst { RangePicker } = DatePicker;\n\nfunction Required() {\n  return <span style={{ color: \"red\" }}>*</span>;\n}\n\nexport default function PawnFloorOracle({ oracleAddress, address, inUseProvider, userSigner, tx, writeContracts }) {\n  const [loading, setLoading] = useState(true);\n  const [newFloorPrice, setNewFloorPrice] = useState();\n  const [tokenId, setTokenId] = useState();\n  const instance = useExternalContractLoader(inUseProvider, oracleAddress, PawnFloorOracleABI);\n  const underwriter = useContractReader({ PawnFloorOracle: instance }, \"PawnFloorOracle\", \"underwriter\", []);\n  const floorPrice = useContractReader({ PawnFloorOracle: instance }, \"PawnFloorOracle\", \"floor\", []);\n const oracleFloor = useBalance(inUseProvider, oracleAddress);\n  console.log(`${floorPrice} is floor price, oracle floor is ${oracleFloor}`);\n  console.log(`${address} is adddress ${underwriter} is underwriter`);\n  React.useEffect(() => {}, []);\n\n  function updatePrice() {\n    const data = instance.interface.encodeFunctionData(\"updateFloor\", []);\n\n    try {\n        tx(\n            userSigner.sendTransaction({\n              to: oracleAddress,\n              data: data,\n              value: parseEther(newFloorPrice),\n            }),\n          );\n    } catch (e) {\n        alert(e.data.message);\n    }\n    \n  }\n\n  function withdraw() {\n    const data = instance.interface.encodeFunctionData(\"withdraw\", []);\n\n    try {\n        tx(\n            userSigner.sendTransaction({\n              to: oracleAddress,\n              data: data,\n              value: 0,\n            }),\n          );\n    } catch (e) {\n        alert(e.data.message);\n    }\n     \n  }\n\n  function acceptOffer() {\n    const data = instance.interface.encodeFunctionData(\"sellFloor\", [tokenId]);\n\n    try {\n        tx(\n            userSigner.sendTransaction({\n              to: oracleAddress,\n              data: data,\n              value: 0,\n            }),\n          );\n    } catch (e) {\n        alert(e.data.message);\n    }\n  }\n\n  return (\n    <div>\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 400, margin: \"auto\", marginTop: 64 }}>\n        <h2>\n          Best I can do is <b>{formatEther(floorPrice ? floorPrice : \"0\")}Ξ</b>\n        </h2>\n        <label>Token Id to sell</label>\n        <Input value={tokenId} onChange={e => setTokenId(e.target.value)} />\n        <Button onClick={()=>acceptOffer()}>Accept Offer</Button>\n\n        <hr />\n      </div>\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 400, margin: \"auto\", marginTop: 64 }}>\n        <h4>Underwriter Options</h4>\n\n        <EtherInput value={newFloorPrice} onChange={e => setNewFloorPrice(e)} />\n        {address == underwriter ? <Button onClick={()=>withdraw()}>Withdraw</Button> : <></>}\n\n        <Button onClick={()=>updatePrice()}>Update Price</Button>\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport {\n  InputNumber,\n  Upload,\n  Button,\n  List,\n  Divider,\n  Input,\n  Card,\n  DatePicker,\n  Space,\n  Slider,\n  Switch,\n  Progress,\n  Spin,\n  Select,\n} from \"antd\";\nimport { SyncOutlined, UploadOutlined } from \"@ant-design/icons\";\nimport { Address, Contract, Balance, EtherInput, AddressInput, Hint, RaiseTile } from \"../components\";\nimport { parseEther, formatEther } from \"@ethersproject/units\";\nimport { Alert } from \"antd\";\nimport { getUrlVars, ipfs, ipfsLinkFromHash, truncateString } from \"../helpers\";\nimport { useExternalContractLoader, useContractReader, useBalance } from \"../hooks\";\nimport { useParams } from \"react-router-dom\";\n\nimport { create as createIPFSClient } from \"ipfs-http-client\";\nimport PawnFloorOracleABI from \"../contracts/PawnFloorOracle.abi\";\nimport PawnFloorOracleFactoryABI from \"../contracts/PawnFloorOracleFactory.abi\";\nimport { isAddress } from \"ethers/lib/utils\";\nimport PawnFloorOracle from \"../components/PawnFloorOracle\";\nimport ERC721ABI from \"../contracts/ERC721.abi\";\n//import PawnFloorOracleFactoryAddress from \"../contracts/PawnFloorOracleFactory.address\";\nconst PawnFloorOracleFactoryAddress = \"0xbd755263A3e31E6C1f83FD72DCc8Fe24b9158e79\";\nconst ipfsClient = createIPFSClient(\"https://ipfs.infura.io:5001\");\nconst { Option } = Select;\nconst { TextArea } = Input;\nconst { RangePicker } = DatePicker;\n\nfunction Required() {\n  return <span style={{ color: \"red\" }}>*</span>;\n}\n\nexport default function CreateUI({\n  setPurposeEvents,\n  address,\n  mainnetProvider,\n  userSigner,\n  localProvider,\n  yourLocalBalance,\n  price,\n  tx,\n  writeContracts,\n  blockExplorer,\n}) {\n  const { a } = getUrlVars();\n  console.log(`a is ${a}`);\n  const [loading, setLoading] = useState(true);\n  const [collectionAddress, setCollectionAddress] = useState();\n  const [floorPrice, setFloorPrice] = useState(0);\n  const inUseProvider = mainnetProvider;\n  const factoryInstance = useExternalContractLoader(\n    inUseProvider,\n    PawnFloorOracleFactoryAddress,\n    PawnFloorOracleFactoryABI,\n  );\n  const instanceAddress = useContractReader(\n    { PawnFloorOracleFactory: factoryInstance },\n    \"PawnFloorOracleFactory\",\n    \"oracles\",\n    [collectionAddress],\n  );\n\n  console.log(`instance address - ${instanceAddress} factory address ${factoryInstance}`);\n\n  function floorDoesntExist() {\n    return instanceAddress == \"0x0000000000000000000000000000000000000000\" || instanceAddress == undefined;\n  }\n\n  React.useEffect(() => {\n    if (a && a!=\"\") {\n      setCollectionAddress(a);\n      console.log(`setting collection addrss to ${collectionAddress} ${a}`);\n    }\n  }, [a]);\n\n   function createFloor() {\n    const data = factoryInstance.interface.encodeFunctionData(\"addOracle\", [collectionAddress]);\n\n    tx(\n      userSigner.sendTransaction({\n        to: PawnFloorOracleFactoryAddress,\n        data: data,\n        value: parseEther(floorPrice),\n      }),\n    );\n  } \n\n  return (\n    <div>\n      <h1>Welcome to the NFT pawn shop:</h1>\n      <h4>Enter a collection address to sell or buy:</h4>\n      <div style={{ justifyContent: \"center\", display: \"inline-block\" }}>\n        <div style={{ maxWidth: \"250px\" }}>\n          <AddressInput value={collectionAddress} onChange={e => setCollectionAddress(e)} />\n        </div>\n      </div>\n      {isAddress(collectionAddress) ? (\n        floorDoesntExist() ? (\n          <>\n            <h3>There is no floor for this collection yet. Wanna set one?</h3>\n            <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 400, margin: \"auto\", marginTop: 64 }}>\n              <h2>Set Floor Price</h2>\n              <p style={{ color: \"grey\" }}>\n                enter the amount you want to put up as a open floor for any item in the collection{\" \"}\n                <a href={`https://etherscan.io/address/${collectionAddress}`}>{truncateString(collectionAddress, 10)}</a>\n              </p>\n              <EtherInput value={floorPrice} onChange={e => setFloorPrice(e)} />\n              {floorPrice > 0 ? (\n                <>\n                  <br />\n                  <Button onClick={() => createFloor()}>Set Floor</Button>\n                  <Hint hint={\"funds are safu\"} />\n                </>\n              ) : (\n                <>Enter a floor price greater than 0</>\n              )}\n            </div>\n          </>\n        ) : (\n          <>\n            \n           <PawnFloorOracle\n           oracleAddress={instanceAddress}\n           address={address}\n           tx={tx}\n           inUseProvider={inUseProvider}\n           userSigner={userSigner}\n           writeContracts={writeContracts}\n           />\n          </>\n        )\n      ) : (\n        <>\n          <br />\n          👆Enter collection address above👆\n        </>\n      )}\n      <br /> <br /> <br /> <br />\n    </div>\n  );\n}\n","\nimport React, { useState } from \"react\";\nimport {\n  InputNumber,\n  Upload,\n  Button,\n  List,\n  Divider,\n  Image,\n  Input,\n  Card,\n  DatePicker,\n  Space,\n  Slider,\n  Switch,\n  Progress,\n  Spin,\n  Select,\n  Layout,\n  Modal,\n  Row\n} from \"antd\";\n\nconst { Header, Footer, Sider, Content } = Layout;\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { SyncOutlined, UploadOutlined } from \"@ant-design/icons\";\nimport { Address, Balance, EtherInput, AddressInput, Hint, RelationToNow } from \"../components\";\nimport { parseEther, formatEther } from \"@ethersproject/units\";\nimport { Alert } from \"antd\";\nimport { ipfs, ipfsLinkFromHash, relationToNow, truncateString } from \"../helpers\";\nimport RaiseFactoryFacetABI from \"../contracts/RaiseFactoryFacet.abi\";\nimport { useExternalContractLoader, useContractReader, useBalance } from \"../hooks\";\n\nimport { useParams } from \"react-router-dom\";\nimport { create as createIPFSClient } from 'ipfs-http-client';\nimport RaiseFactoryFacetAddress from \"../contracts/RaiseFactoryFacet.address\";\nimport RaiseFactoryFacetAbi from \"../contracts/RaiseFactoryFacet.abi\";\nimport OneToOnePricingAbi from \"../contracts/OneToOnePricing.abi\";\nimport RaiseAbi from \"../contracts/Raise.abi\";\nimport { createSetAccessor } from \"typescript\";\nimport ReactMarkdown from 'react-markdown'\nconst ipfsClient = createIPFSClient('https://ipfs.infura.io:5001')\nconst { Option } = Select;\nconst { TextArea } = Input;\nconst { RangePicker } = DatePicker;\n\n\n\nexport default function RaiseUI(props) {//props{match.params, provider, userSigner, address, tx}\n  const { provider, userSigner, address, tx, injectedProvider } = props;\n  const { raiseAddress } = useParams();\n  const [loading, setLoading] = React.useState(false);\n  const [loadedData, setLoadedData] = React.useState(false);\n  const [visible, setVisible] = React.useState(false);\n  const [writeLoading, setWriteLoading] = React.useState(false);\n  const [ethToSpend, setEthToSpend] = React.useState(\"0.1\");\n  const [toReceive, setToReceive] = React.useState(\"0\");\n\n  console.log(`loaded address ${raiseAddress}`);\n  //step 2 create raise instance\n  const raiseInstance = useExternalContractLoader(props.provider, raiseAddress, RaiseAbi);\n  //step 3 use instance to get data\n  const raiseData = useContractReader({ Raise: raiseInstance }, \"Raise\", \"data\", []);\n  const raiseName = useContractReader({ Raise: raiseInstance }, \"Raise\", \"name\", []);\n  const raiseSymbol = useContractReader({ Raise: raiseInstance }, \"Raise\", \"symbol\", []);\n  const raiseEnd = useContractReader({ Raise: raiseInstance }, \"Raise\", \"endTime\", []);\n  const totalRaised = useContractReader({ Raise: raiseInstance }, \"Raise\", \"totalRaised\", []);\n  const okToApe = useContractReader({ Raise: raiseInstance }, \"Raise\", \"okToApe\", [address]);\n  const totalSupply = useContractReader({ Raise: raiseInstance }, \"Raise\", \"totalSupply\", []);\n  const pricingContractAddress = useContractReader({ Raise: raiseInstance }, \"Raise\", \"pricing\", []);\n\n  console.log(`ok to ape ${okToApe}`);\n\n  const pricingInstance = useExternalContractLoader(props.provider, pricingContractAddress, OneToOnePricingAbi);\n  let maxRaise;\n  console.log(pricingContractAddress);\n  if (raiseData) {\n    maxRaise = raiseData[1]\n    document.title = raiseName;\n  }\n  console.log(`raise data ${pricingContractAddress} pricing contract address ${totalRaised} totalRaised ${maxRaise} maxRaise`);\n  console.log(raiseData);\n\n  async function loadRaiseData() {\n    setLoading(true);\n    try {\n\n      var d = await axios.get(raiseData[2]);\n      console.log(`axios got data`);\n      console.log(d);\n      setLoadedData(d.data);\n    } catch (e) {\n      console.log(e);\n    }\n    setLoading(false);\n  }\n\n  React.useEffect(() => {\n    if (raiseData != undefined && !loading) {\n      loadRaiseData();\n    }\n\n    if (parseFloat(ethToSpend) && pricingInstance) {\n      updateToReceive();\n    }\n  }, [raiseData, ethToSpend]);\n\n  async function updateToReceive() {\n    setToReceive(await pricingInstance.viewNextPrice(parseEther(ethToSpend != \"\" ? ethToSpend : \"0\"), totalSupply));\n  }\n\n\n  function isOpen(raiseData, raiseEnd) {\n    if (raiseData && raiseEnd) {\n      const r = relationToNow(raiseData[4], raiseEnd);\n      if (r.includes(\"Closing in\")) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    return false;\n  }\n\n\n  async function handleInvest() {\n    setWriteLoading(true);\n    const data = raiseInstance.interface.encodeFunctionData(\"apeIn\", []);\n\n    /* replace with\n      pricingStrategy address */\n    tx(\n\n      userSigner.sendTransaction({\n        to: raiseAddress,\n        data: data,\n        value: parseEther(ethToSpend),\n      }),\n    );\n    setTimeout(() => {\n      setVisible(false);\n      setWriteLoading(false);\n    }, 2000);\n  };\n\n  const handleCancel = () => {\n    console.log('Clicked cancel button');\n    setVisible(false);\n  };\n\n\n  const backgroundColor = \"lightgrey\"\n  const color = \"black\";\n  return (\n    <Layout style={{ height: window.height }}>\n      <Sider style={{ backgroundColor: backgroundColor }}>\n        <Image src={loadedData.image} style={{ width: \"100%\", height: \"auto\" }} />\n        <br />\n\n        <p style={{ color: color }}><b> {raiseSymbol ? `$${raiseSymbol.toUpperCase()}` : \"\"}</b></p>\n      </Sider>\n      <Layout>\n        <Header style={{ backgroundColor: backgroundColor }}>\n          <h1 style={{ color: color, fontSize: \"x-large\" }}>{raiseName ? raiseName : <Spin />}</h1>\n          <br />\n        </Header>\n        <Content>\n          <ReactMarkdown>\n            {loadedData.description ? loadedData.description : <Spin />}</ReactMarkdown>\n        </Content>\n        <Footer>\n          <hr />\n\n          {isOpen(raiseData, raiseEnd) || okToApe ?\n            (injectedProvider ?\n              <Button onClick={() => setVisible(true)} size={\"large\"} style={{ backgroundColor: backgroundColor, color: color }}>Invest</Button> : <>Connect Your Wallet</>)\n            : (raiseData ? <b><RelationToNow raiseStart={raiseData[4]} raiseEnd={raiseEnd} /> </b> : \"\")\n          }\n          <a href={`https://etherscan.io/address/${raiseAddress}`}> <Hint hint={<>{truncateString(`${raiseAddress}`, 8)}</>} /></a>\n          <Modal\n            title={`Join ${raiseName}`}\n            visible={visible}\n            onOk={handleInvest}\n            confirmLoading={writeLoading}\n            onCancel={handleCancel}\n            cancelText={\"Close\"}\n            okText={userSigner ? \"Invest\" : \"Connect Wallet\"}\n          >\n            <h3>Enter the amount of ETH to invest</h3>\n            <Input value={ethToSpend} onChange={e => setEthToSpend(e.target.value)} />\n            <br /><br />\n            <Row style={{ justifyContent: \"space-between\", width: \"100%\" }}>\n              <span>You will receive: </span>\n              <b>{formatEther(toReceive ? toReceive : \"0\")} ${raiseSymbol ? raiseSymbol.toUpperCase() : \"\"}</b>\n            </Row>\n          </Modal>\n        </Footer>\n      </Layout>\n    </Layout>\n  );\n}\n","import WalletConnectProvider from \"@walletconnect/web3-provider\";\n//import Torus from \"@toruslabs/torus-embed\"\nimport WalletLink from \"walletlink\";\nimport { Alert, Button, Col, Menu, Row } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\nimport Web3Modal from \"web3modal\";\nimport \"./App.css\";\nimport { Account, Contract, Faucet, GasGauge, Header, Ramp, ThemeSwitch } from \"./components\";\nimport { INFURA_ID, NETWORK, NETWORKS } from \"./constants\";\nimport { Transactor } from \"./helpers\";\nimport {\n  useBalance,\n  useContractLoader,\n  useContractReader,\n  useEventListener,\n  useExchangePrice,\n  useGasPrice,\n  useOnBlock,\n  useUserProvider,\n} from \"./hooks\";\n// import Hints from \"./Hints\";\nimport { CreateUI, HomeUI } from \"./views\";\nimport Portis from \"@portis/web3\";\nimport Fortmatic from \"fortmatic\";\nimport Authereum from \"authereum\";\nimport RaiseUI from \"./views/RaiseUI\";\n\nconst { ethers } = require(\"ethers\");\n/*\n    Welcome to 🏗 scaffold-eth !\n\n    Code:\n    https://github.com/austintgriffith/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    🌏 EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n\n/// 📡 What chain are your contracts deployed to?\nconst targetNetwork = NETWORKS.mainnet; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\n\n// 😬 Sorry for all the console logging\nconst DEBUG = true;\nconst NETWORKCHECK = true;\n\n// 🛰 providers\nif (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\n// const mainnetProvider = getDefaultProvider(\"mainnet\", { infura: INFURA_ID, etherscan: ETHERSCAN_KEY, quorum: 1 });\n// const mainnetProvider = new InfuraProvider(\"mainnet\",INFURA_ID);\n//\n// attempt to connect to our own scaffold eth rpc and if that fails fall back to infura...\n// Using StaticJsonRpcProvider as the chainId won't change see https://github.com/ethers-io/ethers.js/issues/901\nconst scaffoldEthProvider = navigator.onLine ? new ethers.providers.StaticJsonRpcProvider(\"https://rpc.scaffoldeth.io:48544\") : null;\nconst poktMainnetProvider = navigator.onLine ? new ethers.providers.StaticJsonRpcProvider(\"https://eth-mainnet.gateway.pokt.network/v1/lb/611156b4a585a20035148406\") : null;\nconst mainnetInfura = navigator.onLine ? new ethers.providers.StaticJsonRpcProvider(\"https://mainnet.infura.io/v3/\" + INFURA_ID) : null;\n// ( ⚠️ Getting \"failed to meet quorum\" errors? Check your INFURA_I )\n\n// 🏠 Your local provider is usually pointed at your local blockchain\nconst localProviderUrl = targetNetwork.rpcUrl;\n// as you deploy to other networks you can set REACT_APP_PROVIDER=https://dai.poa.network in packages/react-app/.env\nconst localProviderUrlFromEnv = process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : localProviderUrl;\nif (DEBUG) console.log(\"🏠 Connecting to provider:\", localProviderUrlFromEnv);\nconst localProvider = new ethers.providers.StaticJsonRpcProvider(localProviderUrlFromEnv);\n\n// 🔭 block explorer URL\nconst blockExplorer = targetNetwork.blockExplorer;\n\n// Coinbase walletLink init\nconst walletLink = new WalletLink({\n  appName: 'coinbase',\n});\n\n// WalletLink provider\nconst walletLinkProvider = walletLink.makeWeb3Provider(\n    `https://mainnet.infura.io/v3/${INFURA_ID}`,\n    1,\n);\n\n// Portis ID: 6255fb2b-58c8-433b-a2c9-62098c05ddc9\n/*\n  Web3 modal helps us \"connect\" external wallets:\n*/\nconst web3Modal = new Web3Modal({\n  network: \"mainnet\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\n  cacheProvider: true, // optional\n  theme:\"light\", // optional. Change to \"dark\" for a dark theme.\n  providerOptions: {\n    walletconnect: {\n      package: WalletConnectProvider, // required\n      options: {\n        bridge: \"https://polygon.bridge.walletconnect.org\",\n        infuraId: INFURA_ID,\n        rpc: {\n          1:`https://mainnet.infura.io/v3/${INFURA_ID}`, // mainnet // For more WalletConnect providers: https://docs.walletconnect.org/quick-start/dapps/web3-provider#required\n          42: `https://kovan.infura.io/v3/${INFURA_ID}`,\n          100:\"https://dai.poa.network\", // xDai\n        },\n      },\n      \n    },\n    portis: {\n      display: {\n        logo: \"https://user-images.githubusercontent.com/9419140/128913641-d025bc0c-e059-42de-a57b-422f196867ce.png\",\n        name: \"Portis\",\n        description: \"Connect to Portis App\",\n      },\n      package: Portis,\n      options: {\n        id: \"6255fb2b-58c8-433b-a2c9-62098c05ddc9\",\n      },\n    },\n    fortmatic: {\n      package: Fortmatic, // required\n      options: {\n        key: \"pk_live_5A7C91B2FC585A17\", // required\n      },\n    },\n    // torus: {\n    //   package: Torus,\n    //   options: {\n    //     networkParams: {\n    //       host: \"https://localhost:8545\", // optional\n    //       chainId: 1337, // optional\n    //       networkId: 1337 // optional\n    //     },\n    //     config: {\n    //       buildEnv: \"development\" // optional\n    //     },\n    //   },\n    // },\n    'custom-walletlink': {\n      display: {\n        logo: 'https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0',\n        name: 'Coinbase',\n        description: 'Connect to Coinbase Wallet (not Coinbase App)',\n      },\n      package: walletLinkProvider,\n      connector: async (provider, options) => {\n        await provider.enable();\n        return provider;\n      },\n    },\n    authereum: {\n      package: Authereum, // required\n    }\n  },\n});\n\n\n\nfunction App(props) {\n  const mainnetProvider = poktMainnetProvider && poktMainnetProvider._isProvider ? poktMainnetProvider : scaffoldEthProvider && scaffoldEthProvider._network ? scaffoldEthProvider : mainnetInfura;\n\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n\n  const logoutOfWeb3Modal = async () => {\n    await web3Modal.clearCachedProvider();\n    if(injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\"){\n      await injectedProvider.provider.disconnect();\n    }\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  };\n\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\n  const price = useExchangePrice(targetNetwork, mainnetProvider);\n\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\n  const userSigner = useUserProvider(injectedProvider, localProvider);\n\n  useEffect(() => {\n    async function getAddress() {\n      if (userSigner) {\n        const newAddress = await userSigner.getAddress();\n        setAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [userSigner]);\n\n  // You can warn the user if you would like them to be on a specific network\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\n\n  // The transactor wraps transactions and provides notificiations\n  const tx = Transactor(userSigner, gasPrice);\n\n  // Faucet Tx can be used to send funds from the faucet\n  const faucetTx = Transactor(localProvider, gasPrice);\n\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  // Just plug in different 🛰 providers to get your balance on different chains:\n  const yourMainnetBalance = useBalance(mainnetProvider, address);\n\n  // Load in your local 📝 contract and read a value from it:\n  const readContracts = useContractLoader(localProvider);\n\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\n  const writeContracts = useContractLoader(userSigner, { chainId: localChainId });\n\n  // EXTERNAL CONTRACT EXAMPLE:\n  //\n  // If you want to bring in the mainnet DAI contract it would look like:\n  const mainnetContracts = useContractLoader(mainnetProvider);\n\n  // If you want to call a function on a new block\n  useOnBlock(mainnetProvider, () => {\n   // console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\n  });\n\n  // Then read your DAI balance like:\n  const myMainnetDAIBalance = useContractReader(mainnetContracts, \"DAI\", \"balanceOf\", [\n    \"0x34aA3F359A9D614239015126635CE7732c18fDF3\",\n  ]);\n\n  // keep track of a variable from the contract in the local React state:\n  const purpose = useContractReader(readContracts, \"YourContract\", \"purpose\");\n\n  // 📟 Listen for broadcast events\n  const setPurposeEvents = useEventListener(readContracts, \"YourContract\", \"SetPurpose\", localProvider, 1);\n\n  /*\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n  console.log(\"🏷 Resolved austingriffith.eth as:\",addressFromENS)\n  */\n\n  //\n  // 🧫 DEBUG 👨🏻‍🔬\n  //\n  useEffect(() => {\n    if (\n      DEBUG &&\n      mainnetProvider &&\n      address &&\n      selectedChainId &&\n      yourLocalBalance &&\n      yourMainnetBalance &&\n      readContracts &&\n      writeContracts &&\n      mainnetContracts\n    ) {\n     /*  console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\n      console.log(\"🏠 localChainId\", localChainId);\n      console.log(\"👩‍💼 selected address:\", address);\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\n      console.log(\"💵 yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\n      console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\n      console.log(\"📝 readContracts\", readContracts);\n      console.log(\"🌍 DAI contract on mainnet:\", mainnetContracts);\n      console.log(\"💵 yourMainnetDAIBalance\", myMainnetDAIBalance);\n      console.log(\"🔐 writeContracts\", writeContracts);\n  */   }\n  }, [\n    mainnetProvider,\n    address,\n    selectedChainId,\n    yourLocalBalance,\n    yourMainnetBalance,\n    readContracts,\n    writeContracts,\n    mainnetContracts,\n  ]);\n\n  let networkDisplay = \"\";\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\n    const networkSelected = NETWORK(selectedChainId);\n    const networkLocal = NETWORK(localChainId);\n    if (selectedChainId === 1337 && localChainId === 31337) {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network ID\"\n            description={\n              <div>\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\n                HardHat.\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    } else {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network\"\n            description={\n              <div>\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\n                <Button\n                  onClick={async () => {\n                    const ethereum = window.ethereum;\n                    const data = [\n                      {\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\n                        chainName: targetNetwork.name,\n                        nativeCurrency: targetNetwork.nativeCurrency,\n                        rpcUrls: [targetNetwork.rpcUrl],\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\n                      },\n                    ];\n                    console.log(\"data\", data);\n                    const tx = await ethereum.request({ method: \"wallet_addEthereumChain\", params: data }).catch();\n                    if (tx) {\n                      console.log(tx);\n                    }\n                  }}\n                >\n                  <b>{networkLocal && networkLocal.name}</b>\n                </Button>\n                .\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    }\n  } else {\n    networkDisplay = (\n      <div style={{ zIndex: -1, position: \"absolute\", right: 154, top: 28, padding: 16, color: targetNetwork.color }}>\n        {targetNetwork.name}\n      </div>\n    );\n  }\n\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n    provider.on(\"chainChanged\", chainId => {\n      console.log(`chain changed to ${chainId}! updating providers`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    provider.on(\"accountsChanged\", () => {\n      console.log(`account changed!`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    // Subscribe to session disconnection\n    provider.on(\"disconnect\", (code, reason) => {\n      console.log(code, reason);\n      logoutOfWeb3Modal();\n    });\n  }, [setInjectedProvider]);\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  const [route, setRoute] = useState();\n  useEffect(() => {\n    setRoute(window.location.pathname);\n  }, [setRoute]);\n\n  let faucetHint = \"\";\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\n\n  const [faucetClicked, setFaucetClicked] = useState(false);\n  if (\n    !faucetClicked &&\n    localProvider &&\n    localProvider._network &&\n    localProvider._network.chainId === 31337 &&\n    yourLocalBalance &&\n    ethers.utils.formatEther(yourLocalBalance) <= 0\n  ) {\n    faucetHint = (\n      <div style={{ padding: 16 }}>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            faucetTx({\n              to: address,\n              value: ethers.utils.parseEther(\"0.01\"),\n            });\n            setFaucetClicked(true);\n          }}\n        >\n          💰 Grab funds from the faucet ⛽️\n        </Button>\n      </div>\n    );\n  }\n  console.log(`userProvdier is ${userSigner}`);\n  return (\n    <div className=\"App\">\n      {/* ✏️ Edit the header and change the title to your project name */}\n       <Header />\n      \n      {networkDisplay}\n     \n      <BrowserRouter>\n      \n      {/*  <Menu style={{ textAlign: \"center\" }} selectedKeys={[route]} mode=\"horizontal\">\n        <Menu.Item key=\"/\">\n          <Link\n            onClick={() => {\n              setRoute(\"/\");\n            }}\n            to=\"/\"\n          >\n            Home\n          </Link>\n        </Menu.Item>\n        <Menu.Item key=\"/create\">\n          <Link\n            onClick={() => {\n              setRoute(\"/create\");\n            }}\n            to=\"/create\"\n          >\n            Create\n          </Link>\n        </Menu.Item>\n      \n      </Menu>\n          */}\n      \n\n        <Switch>\n          <Route exact path=\"/\">\n          <HomeUI\n              address={address}\n              userSigner={userSigner}\n              mainnetProvider={mainnetProvider}\n              localProvider={localProvider}\n              yourLocalBalance={yourLocalBalance}\n              price={price}\n              tx={tx}\n              writeContracts={writeContracts}\n              readContracts={readContracts}\n              purpose={purpose}\n              setPurposeEvents={setPurposeEvents}\n              blockExplorer={blockExplorer}\n            />\n          </Route>\n          </Switch>\n      </BrowserRouter>\n\n      <ThemeSwitch />\n\n      {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\n      <div style={{ position: \"fixed\", textAlign: \"right\", right: 0, top: 0, padding: 10 }}>\n        <Account\n          address={address}\n          localProvider={localProvider}\n          userSigner={userSigner}\n          mainnetProvider={mainnetProvider}\n          price={price}\n          web3Modal={web3Modal}\n          loadWeb3Modal={loadWeb3Modal}\n          logoutOfWeb3Modal={logoutOfWeb3Modal}\n          blockExplorer={blockExplorer}\n        />\n      </div>\n      <div>\n        {/* footer */}\n       {/*  <p>2021 🐧 <a href=\"twitter.com/0xPuffin\">0xPuffin</a></p> */}{/* \n       <p><a href={window.location.protocol+\"//\"+window.location.host}>Powered by <i>RAISEHOUSE</i></a></p> */}\n        <p><a href=\"https://twitter.com/bestIcandois\">Twitter</a> | <a href=\"https://discord.gg/gbCkAR8TB5\">Discord</a> | <a href=\"https://etherscan.io/address/0xbd755263A3e31E6C1f83FD72DCc8Fe24b9158e79#code\">Contract Code</a></p>\n      </div>\n\n      {/* 🗺 Extra UI like gas price, eth price, faucet, and support: */}\n      <div style={{ position: \"fixed\", textAlign: \"left\", left: 0, bottom: 20, padding: 10 }}>\n        <Row align=\"middle\" gutter={[4, 4]}>\n          \n          <Col span={8} style={{ textAlign: \"center\", opacity: 1 }}>\n            <Button\n              onClick={() => {\n                window.open(\"https://discord.gg/ujJAshRmE5\");\n              }}\n              size=\"large\"\n              shape=\"round\"\n            >\n              <span style={{ marginRight: 8 }} role=\"img\" aria-label=\"support\">\n                💬\n              </span>\n              Support\n            </Button>\n          </Col>\n        </Row>\n         <Row align=\"middle\" gutter={[4, 4]}>\n           <Col span={24}>\n              <Faucet localProvider={localProvider} price={price} ensProvider={mainnetProvider}/>\n              \n           </Col>\n         </Row>\n \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { Fetcher, Route, Token, WETH } from \"@uniswap/sdk\";\nimport { usePoller } from \"eth-hooks\";\nimport { useState } from \"react\";\n\nexport default function useExchangePrice(targetNetwork, mainnetProvider, pollTime) {\n  const [price, setPrice] = useState(0);\n\n  const pollPrice = () => {\n    async function getPrice() {\n      if(!mainnetProvider)\n        return 0;\n      if (targetNetwork.price) {\n        setPrice(targetNetwork.price);\n      } else {\n        const DAI = new Token(\n          mainnetProvider.network ? mainnetProvider.network.chainId : 1,\n          \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n          18,\n        );\n        const pair = await Fetcher.fetchPairData(DAI, WETH[DAI.chainId], mainnetProvider);\n        const route = new Route([pair], WETH[DAI.chainId]);\n        setPrice(parseFloat(route.midPrice.toSignificant(6)));\n      }\n    }\n    getPrice();\n  };\n  usePoller(pollPrice, pollTime || 9777);\n\n  return price;\n}\n","import axios from \"axios\";\nimport { usePoller } from \"eth-hooks\";\nimport { useState } from \"react\";\n\nexport default function useGasPrice(targetNetwork, speed) {\n  const [gasPrice, setGasPrice] = useState();\n  const loadGasPrice = async () => {\n    if (targetNetwork.hasOwnProperty(\"gasPrice\")) {\n      setGasPrice(targetNetwork.gasPrice);\n    } else {\n      if(navigator.onLine){\n        axios\n          .get(\"https://ethgasstation.info/json/ethgasAPI.json\")\n          .then(response => {\n            const newGasPrice = response.data[speed || \"fast\"] * 100000000;\n            if (newGasPrice !== gasPrice) {\n              setGasPrice(newGasPrice);\n            }\n          })\n          .catch(error => console.log(error));\n      }\n    }\n  };\n\n  usePoller(loadGasPrice, 39999);\n  return gasPrice;\n}\n","import { useEffect, useState } from \"react\";\n\n/*\n  ~ What it does? ~\n\n  Enables you to keep track of events\n\n  ~ How can I use? ~\n\n  const setPurposeEvents = useEventListener(readContracts, \"YourContract\", \"SetPurpose\", localProvider, 1);\n\n  ~ Features ~\n\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\n  - Specify the name of the contract, in this case it is \"YourContract\"\n  - Specify the name of the event in the contract, in this case we keep track of \"SetPurpose\" event\n  - Specify the provider\n*/\n\nexport default function useEventListener(contracts, contractName, eventName, provider, startBlock, args) {\n  const [updates, setUpdates] = useState([]);\n\n  useEffect(() => {\n    if (typeof provider !== \"undefined\" && typeof startBlock !== \"undefined\") {\n      // if you want to read _all_ events from your contracts, set this to the block number it is deployed\n      provider.resetEventsBlock(startBlock);\n    }\n    if (contracts && contractName && contracts[contractName]) {\n      try {\n        contracts[contractName].on(eventName, (...args) => {\n          const blockNumber = args[args.length - 1].blockNumber;\n          setUpdates(messages => [{ blockNumber, ...args.pop().args }, ...messages]);\n        });\n        return () => {\n          contracts[contractName].removeListener(eventName);\n        };\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }, [provider, startBlock, contracts, contractName, eventName]);\n\n  return updates;\n}\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport React from \"react\";\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\n};\n\nconst prevTheme = window.localStorage.getItem(\"theme\");\n\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\n\nconst client = new ApolloClient({\n  uri: subgraphUri,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\n      <App subgraphUri={subgraphUri} />\n    </ThemeSwitcherProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n","module.exports = [\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": false,\n        \"internalType\": \"contract Raise\",\n        \"name\": \"raise\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"id\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"RaiseCreated\",\n    \"type\": \"event\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"transferTax\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"creatorMint\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"max\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"dataURI\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"length\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"start\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"name\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"symbol\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"pricing_\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"createFR\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"govTokenAddress\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"raiseCount\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"raises\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"tk\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"setGovToken\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }\n];","module.exports = \"0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82\";","module.exports =  [\n  {\n    \"inputs\": [\n      {\n        \"components\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"creatorMint\",\n            \"type\": \"uint256\"\n          },\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"max\",\n            \"type\": \"uint256\"\n          },\n          {\n            \"internalType\": \"string\",\n            \"name\": \"dataURI\",\n            \"type\": \"string\"\n          },\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"length\",\n            \"type\": \"uint256\"\n          },\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"startTime\",\n            \"type\": \"uint256\"\n          },\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"transferTax\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"internalType\": \"struct Request\",\n        \"name\": \"request_\",\n        \"type\": \"tuple\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"name_\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"symbol_\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"gov_\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"pricing_\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": false,\n        \"internalType\": \"address\",\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"address\",\n        \"name\": \"spender\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"Approval\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": false,\n        \"internalType\": \"address\",\n        \"name\": \"sender\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"address\",\n        \"name\": \"recipient\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"Transfer\",\n    \"type\": \"event\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"spender\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"allowance\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"apeIn\",\n    \"outputs\": [],\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"spender\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"approve\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"account\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"balanceOf\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"belowMax\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"creator\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address payable\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"data\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"creatorMint\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"max\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"dataURI\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"length\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"startTime\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"transferTax\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"decimals\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint8\",\n        \"name\": \"\",\n        \"type\": \"uint8\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"spender\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"subtractedValue\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"decreaseAllowance\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"endTime\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"spender\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"addedValue\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"increaseAllowance\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"name\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"ape\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"okToApe\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"pricing\",\n    \"outputs\": [\n      {\n        \"internalType\": \"contract IPricing\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"raiseGov\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"symbol\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"totalRaised\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"totalSupply\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"recipient\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"transfer\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"sender\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"recipient\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"transferFrom\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"ape\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"whitelisted\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }\n];","module.exports = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"collection_\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"payable\",\n    \"type\": \"constructor\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"price\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"address\",\n        \"name\": \"underwriter\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"bool\",\n        \"name\": \"sale\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"name\": \"FloorChange\",\n    \"type\": \"event\"\n  },\n  {\n    \"stateMutability\": \"payable\",\n    \"type\": \"fallback\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"collection\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"floor\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"lastUpdate\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"sellFloor\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"timeSinceLastUpdate\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"underwriter\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"updateFloor\",\n    \"outputs\": [],\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"withdraw\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }\n];","module.exports = [\n  {\n    \"inputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"collection\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"addOracle\",\n    \"outputs\": [],\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"oracles\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }\n];"],"sourceRoot":""}